/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ComplianceChecker {
  export type ComplianceResultStruct = {
    isCompliant: boolean;
    violations: string[];
    riskScore: BigNumberish;
    jurisdiction: string;
    expiresAt: BigNumberish;
  };

  export type ComplianceResultStructOutput = [
    isCompliant: boolean,
    violations: string[],
    riskScore: bigint,
    jurisdiction: string,
    expiresAt: bigint
  ] & {
    isCompliant: boolean;
    violations: string[];
    riskScore: bigint;
    jurisdiction: string;
    expiresAt: bigint;
  };

  export type ComplianceConfigStruct = {
    maxRiskScore: BigNumberish;
    defaultExpiryDuration: BigNumberish;
    allowCrossJurisdiction: boolean;
    requireCredentialVerification: boolean;
    enableRiskScoring: boolean;
  };

  export type ComplianceConfigStructOutput = [
    maxRiskScore: bigint,
    defaultExpiryDuration: bigint,
    allowCrossJurisdiction: boolean,
    requireCredentialVerification: boolean,
    enableRiskScoring: boolean
  ] & {
    maxRiskScore: bigint;
    defaultExpiryDuration: bigint;
    allowCrossJurisdiction: boolean;
    requireCredentialVerification: boolean;
    enableRiskScoring: boolean;
  };

  export type JurisdictionRulesStruct = {
    maxRiskScore: BigNumberish;
    expiryDuration: BigNumberish;
    requiresAddressVerification: boolean;
    requiresPhoneVerification: boolean;
    requiresEmailVerification: boolean;
    requiredCredentialTypes: string[];
    isActive: boolean;
  };

  export type JurisdictionRulesStructOutput = [
    maxRiskScore: bigint,
    expiryDuration: bigint,
    requiresAddressVerification: boolean,
    requiresPhoneVerification: boolean,
    requiresEmailVerification: boolean,
    requiredCredentialTypes: string[],
    isActive: boolean
  ] & {
    maxRiskScore: bigint;
    expiryDuration: bigint;
    requiresAddressVerification: boolean;
    requiresPhoneVerification: boolean;
    requiresEmailVerification: boolean;
    requiredCredentialTypes: string[];
    isActive: boolean;
  };
}

export interface ComplianceCheckerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "authorizedWriters"
      | "checkCompliance"
      | "complianceConfig"
      | "didCredentialStorage"
      | "getComplianceConfig"
      | "getComplianceViolations"
      | "getJurisdictionRules"
      | "isAuthorizedWriter"
      | "isCompliant"
      | "jurisdictionRules"
      | "kycDataStorage"
      | "owner"
      | "setAuthorizedWriter"
      | "tenantConfigStorage"
      | "updateComplianceConfig"
      | "updateJurisdictionRules"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "ComplianceChecked"
      | "ComplianceConfigUpdated"
      | "JurisdictionRulesUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCompliance",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "complianceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didCredentialStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceViolations",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJurisdictionRules",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompliant",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionRules",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "kycDataStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tenantConfigStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateComplianceConfig",
    values: [BigNumberish, BigNumberish, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJurisdictionRules",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      boolean,
      string[],
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complianceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didCredentialStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceViolations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJurisdictionRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompliant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kycDataStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantConfigStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateComplianceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJurisdictionRules",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComplianceCheckedEvent {
  export type InputTuple = [
    user: AddressLike,
    jurisdiction: string,
    isCompliant: boolean,
    riskScore: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    jurisdiction: string,
    isCompliant: boolean,
    riskScore: bigint
  ];
  export interface OutputObject {
    user: string;
    jurisdiction: string;
    isCompliant: boolean;
    riskScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComplianceConfigUpdatedEvent {
  export type InputTuple = [
    field: string,
    oldValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [field: string, oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    field: string;
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JurisdictionRulesUpdatedEvent {
  export type InputTuple = [
    jurisdiction: string,
    field: string,
    value: boolean
  ];
  export type OutputTuple = [
    jurisdiction: string,
    field: string,
    value: boolean
  ];
  export interface OutputObject {
    jurisdiction: string;
    field: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplianceChecker extends BaseContract {
  connect(runner?: ContractRunner | null): ComplianceChecker;
  waitForDeployment(): Promise<this>;

  interface: ComplianceCheckerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  checkCompliance: TypedContractMethod<
    [user: AddressLike, jurisdiction: string, tenantId: string],
    [ComplianceChecker.ComplianceResultStructOutput],
    "view"
  >;

  complianceConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean, boolean] & {
        maxRiskScore: bigint;
        defaultExpiryDuration: bigint;
        allowCrossJurisdiction: boolean;
        requireCredentialVerification: boolean;
        enableRiskScoring: boolean;
      }
    ],
    "view"
  >;

  didCredentialStorage: TypedContractMethod<[], [string], "view">;

  getComplianceConfig: TypedContractMethod<
    [],
    [ComplianceChecker.ComplianceConfigStructOutput],
    "view"
  >;

  getComplianceViolations: TypedContractMethod<
    [user: AddressLike, jurisdiction: string, tenantId: string],
    [string[]],
    "view"
  >;

  getJurisdictionRules: TypedContractMethod<
    [jurisdiction: string],
    [ComplianceChecker.JurisdictionRulesStructOutput],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isCompliant: TypedContractMethod<
    [user: AddressLike, jurisdiction: string, tenantId: string],
    [boolean],
    "view"
  >;

  jurisdictionRules: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, boolean, boolean, boolean, boolean] & {
        maxRiskScore: bigint;
        expiryDuration: bigint;
        requiresAddressVerification: boolean;
        requiresPhoneVerification: boolean;
        requiresEmailVerification: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;

  kycDataStorage: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  tenantConfigStorage: TypedContractMethod<[], [string], "view">;

  updateComplianceConfig: TypedContractMethod<
    [
      _maxRiskScore: BigNumberish,
      _defaultExpiryDuration: BigNumberish,
      _allowCrossJurisdiction: boolean,
      _requireCredentialVerification: boolean,
      _enableRiskScoring: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateJurisdictionRules: TypedContractMethod<
    [
      jurisdiction: string,
      maxRiskScore: BigNumberish,
      expiryDuration: BigNumberish,
      requiresAddressVerification: boolean,
      requiresPhoneVerification: boolean,
      requiresEmailVerification: boolean,
      requiredCredentialTypes: string[],
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkCompliance"
  ): TypedContractMethod<
    [user: AddressLike, jurisdiction: string, tenantId: string],
    [ComplianceChecker.ComplianceResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "complianceConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean, boolean] & {
        maxRiskScore: bigint;
        defaultExpiryDuration: bigint;
        allowCrossJurisdiction: boolean;
        requireCredentialVerification: boolean;
        enableRiskScoring: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "didCredentialStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getComplianceConfig"
  ): TypedContractMethod<
    [],
    [ComplianceChecker.ComplianceConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceViolations"
  ): TypedContractMethod<
    [user: AddressLike, jurisdiction: string, tenantId: string],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJurisdictionRules"
  ): TypedContractMethod<
    [jurisdiction: string],
    [ComplianceChecker.JurisdictionRulesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCompliant"
  ): TypedContractMethod<
    [user: AddressLike, jurisdiction: string, tenantId: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "jurisdictionRules"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, boolean, boolean, boolean, boolean] & {
        maxRiskScore: bigint;
        expiryDuration: bigint;
        requiresAddressVerification: boolean;
        requiresPhoneVerification: boolean;
        requiresEmailVerification: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "kycDataStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tenantConfigStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateComplianceConfig"
  ): TypedContractMethod<
    [
      _maxRiskScore: BigNumberish,
      _defaultExpiryDuration: BigNumberish,
      _allowCrossJurisdiction: boolean,
      _requireCredentialVerification: boolean,
      _enableRiskScoring: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateJurisdictionRules"
  ): TypedContractMethod<
    [
      jurisdiction: string,
      maxRiskScore: BigNumberish,
      expiryDuration: BigNumberish,
      requiresAddressVerification: boolean,
      requiresPhoneVerification: boolean,
      requiresEmailVerification: boolean,
      requiredCredentialTypes: string[],
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ComplianceChecked"
  ): TypedContractEvent<
    ComplianceCheckedEvent.InputTuple,
    ComplianceCheckedEvent.OutputTuple,
    ComplianceCheckedEvent.OutputObject
  >;
  getEvent(
    key: "ComplianceConfigUpdated"
  ): TypedContractEvent<
    ComplianceConfigUpdatedEvent.InputTuple,
    ComplianceConfigUpdatedEvent.OutputTuple,
    ComplianceConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JurisdictionRulesUpdated"
  ): TypedContractEvent<
    JurisdictionRulesUpdatedEvent.InputTuple,
    JurisdictionRulesUpdatedEvent.OutputTuple,
    JurisdictionRulesUpdatedEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "ComplianceChecked(address,string,bool,uint256)": TypedContractEvent<
      ComplianceCheckedEvent.InputTuple,
      ComplianceCheckedEvent.OutputTuple,
      ComplianceCheckedEvent.OutputObject
    >;
    ComplianceChecked: TypedContractEvent<
      ComplianceCheckedEvent.InputTuple,
      ComplianceCheckedEvent.OutputTuple,
      ComplianceCheckedEvent.OutputObject
    >;

    "ComplianceConfigUpdated(string,uint256,uint256)": TypedContractEvent<
      ComplianceConfigUpdatedEvent.InputTuple,
      ComplianceConfigUpdatedEvent.OutputTuple,
      ComplianceConfigUpdatedEvent.OutputObject
    >;
    ComplianceConfigUpdated: TypedContractEvent<
      ComplianceConfigUpdatedEvent.InputTuple,
      ComplianceConfigUpdatedEvent.OutputTuple,
      ComplianceConfigUpdatedEvent.OutputObject
    >;

    "JurisdictionRulesUpdated(string,string,bool)": TypedContractEvent<
      JurisdictionRulesUpdatedEvent.InputTuple,
      JurisdictionRulesUpdatedEvent.OutputTuple,
      JurisdictionRulesUpdatedEvent.OutputObject
    >;
    JurisdictionRulesUpdated: TypedContractEvent<
      JurisdictionRulesUpdatedEvent.InputTuple,
      JurisdictionRulesUpdatedEvent.OutputTuple,
      JurisdictionRulesUpdatedEvent.OutputObject
    >;
  };
}
