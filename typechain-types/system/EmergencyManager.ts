/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EmergencyManager {
  export type EmergencyActionStruct = {
    action: string;
    executor: AddressLike;
    timestamp: BigNumberish;
    reason: string;
    executed: boolean;
  };

  export type EmergencyActionStructOutput = [
    action: string,
    executor: string,
    timestamp: bigint,
    reason: string,
    executed: boolean
  ] & {
    action: string;
    executor: string;
    timestamp: bigint;
    reason: string;
    executed: boolean;
  };
}

export interface EmergencyManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "addEmergencyContact"
      | "addEmergencySigner"
      | "declareEmergency"
      | "disableEmergencySystem"
      | "emergencyActionCounter"
      | "emergencyActions"
      | "emergencyContacts"
      | "emergencyDeclaredAt"
      | "emergencyDeclaredBy"
      | "emergencyDisableAllMultisig"
      | "emergencyMode"
      | "emergencyOverride"
      | "emergencyReason"
      | "emergencySigners"
      | "emergencySystemEnabled"
      | "enableEmergencySystem"
      | "getEmergencyAction"
      | "getEmergencyActionCount"
      | "getEmergencyStatus"
      | "getEmergencySystemStatus"
      | "isEmergencyContact"
      | "isEmergencySigner"
      | "isEmergencySystemEnabled"
      | "multisigManager"
      | "owner"
      | "removeEmergencyContact"
      | "removeEmergencySigner"
      | "resolveEmergency"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyActionLogged"
      | "EmergencyContactUpdated"
      | "EmergencyDeclared"
      | "EmergencyOverrideExecuted"
      | "EmergencyResolved"
      | "EmergencySignerAdded"
      | "EmergencySignerRemoved"
      | "EmergencySystemDisabled"
      | "EmergencySystemEnabled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addEmergencyContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addEmergencySigner",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "declareEmergency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableEmergencySystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyActionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyContacts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDeclaredAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDeclaredBy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDisableAllMultisig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOverride",
    values: [string, AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencySigners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencySystemEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableEmergencySystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyActionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencySystemStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergencyContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergencySigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergencySystemEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multisigManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEmergencyContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEmergencySigner",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveEmergency",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addEmergencyContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmergencySigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableEmergencySystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyActionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDeclaredAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDeclaredBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDisableAllMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencySigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencySystemEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableEmergencySystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyActionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencySystemStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmergencyContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmergencySigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmergencySystemEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multisigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencyContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencySigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveEmergency",
    data: BytesLike
  ): Result;
}

export namespace EmergencyActionLoggedEvent {
  export type InputTuple = [
    actionId: BigNumberish,
    action: string,
    executor: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    actionId: bigint,
    action: string,
    executor: string,
    reason: string
  ];
  export interface OutputObject {
    actionId: bigint;
    action: string;
    executor: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyContactUpdatedEvent {
  export type InputTuple = [
    contact: AddressLike,
    authorized: boolean,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    contact: string,
    authorized: boolean,
    updatedBy: string
  ];
  export interface OutputObject {
    contact: string;
    authorized: boolean;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyDeclaredEvent {
  export type InputTuple = [
    declaredBy: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    declaredBy: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    declaredBy: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyOverrideExecutedEvent {
  export type InputTuple = [
    functionName: string,
    target: AddressLike,
    executor: AddressLike,
    success: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    functionName: string,
    target: string,
    executor: string,
    success: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    functionName: string;
    target: string;
    executor: string;
    success: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyResolvedEvent {
  export type InputTuple = [
    resolvedBy: AddressLike,
    duration: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    resolvedBy: string,
    duration: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    resolvedBy: string;
    duration: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencySignerAddedEvent {
  export type InputTuple = [
    signer: AddressLike,
    addedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    signer: string,
    addedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    signer: string;
    addedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencySignerRemovedEvent {
  export type InputTuple = [
    signer: AddressLike,
    removedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    signer: string,
    removedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    signer: string;
    removedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencySystemDisabledEvent {
  export type InputTuple = [disabledBy: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [disabledBy: string, timestamp: bigint];
  export interface OutputObject {
    disabledBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencySystemEnabledEvent {
  export type InputTuple = [enabledBy: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [enabledBy: string, timestamp: bigint];
  export interface OutputObject {
    enabledBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmergencyManager extends BaseContract {
  connect(runner?: ContractRunner | null): EmergencyManager;
  waitForDeployment(): Promise<this>;

  interface: EmergencyManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  addEmergencyContact: TypedContractMethod<
    [contact: AddressLike],
    [void],
    "nonpayable"
  >;

  addEmergencySigner: TypedContractMethod<
    [signer: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  declareEmergency: TypedContractMethod<[reason: string], [void], "nonpayable">;

  disableEmergencySystem: TypedContractMethod<[], [void], "nonpayable">;

  emergencyActionCounter: TypedContractMethod<[], [bigint], "view">;

  emergencyActions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        action: string;
        executor: string;
        timestamp: bigint;
        reason: string;
        executed: boolean;
      }
    ],
    "view"
  >;

  emergencyContacts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  emergencyDeclaredAt: TypedContractMethod<[], [bigint], "view">;

  emergencyDeclaredBy: TypedContractMethod<[], [string], "view">;

  emergencyDisableAllMultisig: TypedContractMethod<
    [reason: string],
    [void],
    "nonpayable"
  >;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  emergencyOverride: TypedContractMethod<
    [
      functionName: string,
      target: AddressLike,
      data: BytesLike,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  emergencyReason: TypedContractMethod<[], [string], "view">;

  emergencySigners: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  emergencySystemEnabled: TypedContractMethod<[], [boolean], "view">;

  enableEmergencySystem: TypedContractMethod<[], [void], "nonpayable">;

  getEmergencyAction: TypedContractMethod<
    [actionId: BigNumberish],
    [EmergencyManager.EmergencyActionStructOutput],
    "view"
  >;

  getEmergencyActionCount: TypedContractMethod<[], [bigint], "view">;

  getEmergencyStatus: TypedContractMethod<
    [],
    [
      [boolean, bigint, string, string, bigint] & {
        isEmergency: boolean;
        declaredAt: bigint;
        declaredBy: string;
        reason: string;
        duration: bigint;
      }
    ],
    "view"
  >;

  getEmergencySystemStatus: TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, string, string, bigint] & {
        systemEnabled: boolean;
        isEmergency: boolean;
        declaredAt: bigint;
        declaredBy: string;
        reason: string;
        duration: bigint;
      }
    ],
    "view"
  >;

  isEmergencyContact: TypedContractMethod<
    [contact: AddressLike],
    [boolean],
    "view"
  >;

  isEmergencySigner: TypedContractMethod<
    [signer: AddressLike],
    [boolean],
    "view"
  >;

  isEmergencySystemEnabled: TypedContractMethod<[], [boolean], "view">;

  multisigManager: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeEmergencyContact: TypedContractMethod<
    [contact: AddressLike],
    [void],
    "nonpayable"
  >;

  removeEmergencySigner: TypedContractMethod<
    [signer: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  resolveEmergency: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addEmergencyContact"
  ): TypedContractMethod<[contact: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addEmergencySigner"
  ): TypedContractMethod<
    [signer: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "declareEmergency"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableEmergencySystem"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyActionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyActions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        action: string;
        executor: string;
        timestamp: bigint;
        reason: string;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyContacts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyDeclaredAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyDeclaredBy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyDisableAllMultisig"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyOverride"
  ): TypedContractMethod<
    [
      functionName: string,
      target: AddressLike,
      data: BytesLike,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyReason"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencySigners"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencySystemEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "enableEmergencySystem"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEmergencyAction"
  ): TypedContractMethod<
    [actionId: BigNumberish],
    [EmergencyManager.EmergencyActionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmergencyActionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmergencyStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, string, string, bigint] & {
        isEmergency: boolean;
        declaredAt: bigint;
        declaredBy: string;
        reason: string;
        duration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmergencySystemStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, string, string, bigint] & {
        systemEnabled: boolean;
        isEmergency: boolean;
        declaredAt: bigint;
        declaredBy: string;
        reason: string;
        duration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEmergencyContact"
  ): TypedContractMethod<[contact: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEmergencySigner"
  ): TypedContractMethod<[signer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEmergencySystemEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "multisigManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeEmergencyContact"
  ): TypedContractMethod<[contact: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeEmergencySigner"
  ): TypedContractMethod<
    [signer: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EmergencyActionLogged"
  ): TypedContractEvent<
    EmergencyActionLoggedEvent.InputTuple,
    EmergencyActionLoggedEvent.OutputTuple,
    EmergencyActionLoggedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyContactUpdated"
  ): TypedContractEvent<
    EmergencyContactUpdatedEvent.InputTuple,
    EmergencyContactUpdatedEvent.OutputTuple,
    EmergencyContactUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyDeclared"
  ): TypedContractEvent<
    EmergencyDeclaredEvent.InputTuple,
    EmergencyDeclaredEvent.OutputTuple,
    EmergencyDeclaredEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyOverrideExecuted"
  ): TypedContractEvent<
    EmergencyOverrideExecutedEvent.InputTuple,
    EmergencyOverrideExecutedEvent.OutputTuple,
    EmergencyOverrideExecutedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyResolved"
  ): TypedContractEvent<
    EmergencyResolvedEvent.InputTuple,
    EmergencyResolvedEvent.OutputTuple,
    EmergencyResolvedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencySignerAdded"
  ): TypedContractEvent<
    EmergencySignerAddedEvent.InputTuple,
    EmergencySignerAddedEvent.OutputTuple,
    EmergencySignerAddedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencySignerRemoved"
  ): TypedContractEvent<
    EmergencySignerRemovedEvent.InputTuple,
    EmergencySignerRemovedEvent.OutputTuple,
    EmergencySignerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencySystemDisabled"
  ): TypedContractEvent<
    EmergencySystemDisabledEvent.InputTuple,
    EmergencySystemDisabledEvent.OutputTuple,
    EmergencySystemDisabledEvent.OutputObject
  >;
  getEvent(
    key: "EmergencySystemEnabled"
  ): TypedContractEvent<
    EmergencySystemEnabledEvent.InputTuple,
    EmergencySystemEnabledEvent.OutputTuple,
    EmergencySystemEnabledEvent.OutputObject
  >;

  filters: {
    "EmergencyActionLogged(uint256,string,address,string)": TypedContractEvent<
      EmergencyActionLoggedEvent.InputTuple,
      EmergencyActionLoggedEvent.OutputTuple,
      EmergencyActionLoggedEvent.OutputObject
    >;
    EmergencyActionLogged: TypedContractEvent<
      EmergencyActionLoggedEvent.InputTuple,
      EmergencyActionLoggedEvent.OutputTuple,
      EmergencyActionLoggedEvent.OutputObject
    >;

    "EmergencyContactUpdated(address,bool,address)": TypedContractEvent<
      EmergencyContactUpdatedEvent.InputTuple,
      EmergencyContactUpdatedEvent.OutputTuple,
      EmergencyContactUpdatedEvent.OutputObject
    >;
    EmergencyContactUpdated: TypedContractEvent<
      EmergencyContactUpdatedEvent.InputTuple,
      EmergencyContactUpdatedEvent.OutputTuple,
      EmergencyContactUpdatedEvent.OutputObject
    >;

    "EmergencyDeclared(address,string,uint256)": TypedContractEvent<
      EmergencyDeclaredEvent.InputTuple,
      EmergencyDeclaredEvent.OutputTuple,
      EmergencyDeclaredEvent.OutputObject
    >;
    EmergencyDeclared: TypedContractEvent<
      EmergencyDeclaredEvent.InputTuple,
      EmergencyDeclaredEvent.OutputTuple,
      EmergencyDeclaredEvent.OutputObject
    >;

    "EmergencyOverrideExecuted(string,address,address,bool,uint256)": TypedContractEvent<
      EmergencyOverrideExecutedEvent.InputTuple,
      EmergencyOverrideExecutedEvent.OutputTuple,
      EmergencyOverrideExecutedEvent.OutputObject
    >;
    EmergencyOverrideExecuted: TypedContractEvent<
      EmergencyOverrideExecutedEvent.InputTuple,
      EmergencyOverrideExecutedEvent.OutputTuple,
      EmergencyOverrideExecutedEvent.OutputObject
    >;

    "EmergencyResolved(address,uint256,uint256)": TypedContractEvent<
      EmergencyResolvedEvent.InputTuple,
      EmergencyResolvedEvent.OutputTuple,
      EmergencyResolvedEvent.OutputObject
    >;
    EmergencyResolved: TypedContractEvent<
      EmergencyResolvedEvent.InputTuple,
      EmergencyResolvedEvent.OutputTuple,
      EmergencyResolvedEvent.OutputObject
    >;

    "EmergencySignerAdded(address,address,uint256)": TypedContractEvent<
      EmergencySignerAddedEvent.InputTuple,
      EmergencySignerAddedEvent.OutputTuple,
      EmergencySignerAddedEvent.OutputObject
    >;
    EmergencySignerAdded: TypedContractEvent<
      EmergencySignerAddedEvent.InputTuple,
      EmergencySignerAddedEvent.OutputTuple,
      EmergencySignerAddedEvent.OutputObject
    >;

    "EmergencySignerRemoved(address,address,uint256)": TypedContractEvent<
      EmergencySignerRemovedEvent.InputTuple,
      EmergencySignerRemovedEvent.OutputTuple,
      EmergencySignerRemovedEvent.OutputObject
    >;
    EmergencySignerRemoved: TypedContractEvent<
      EmergencySignerRemovedEvent.InputTuple,
      EmergencySignerRemovedEvent.OutputTuple,
      EmergencySignerRemovedEvent.OutputObject
    >;

    "EmergencySystemDisabled(address,uint256)": TypedContractEvent<
      EmergencySystemDisabledEvent.InputTuple,
      EmergencySystemDisabledEvent.OutputTuple,
      EmergencySystemDisabledEvent.OutputObject
    >;
    EmergencySystemDisabled: TypedContractEvent<
      EmergencySystemDisabledEvent.InputTuple,
      EmergencySystemDisabledEvent.OutputTuple,
      EmergencySystemDisabledEvent.OutputObject
    >;

    "EmergencySystemEnabled(address,uint256)": TypedContractEvent<
      EmergencySystemEnabledEvent.InputTuple,
      EmergencySystemEnabledEvent.OutputTuple,
      EmergencySystemEnabledEvent.OutputObject
    >;
    EmergencySystemEnabled: TypedContractEvent<
      EmergencySystemEnabledEvent.InputTuple,
      EmergencySystemEnabledEvent.OutputTuple,
      EmergencySystemEnabledEvent.OutputObject
    >;
  };
}
