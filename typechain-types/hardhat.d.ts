/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "AuthorizationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorizationManager__factory>;
    getContractFactory(
      name: "BatchOperationsSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchOperationsSimple__factory>;
    getContractFactory(
      name: "DIDManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DIDManager__factory>;
    getContractFactory(
      name: "KYCManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KYCManager__factory>;
    getContractFactory(
      name: "MultisigExample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultisigExample__factory>;
    getContractFactory(
      name: "GovernanceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceManager__factory>;
    getContractFactory(
      name: "AuditLogStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuditLogStorage__factory>;
    getContractFactory(
      name: "DIDCredentialStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DIDCredentialStorage__factory>;
    getContractFactory(
      name: "KYCDataStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KYCDataStorage__factory>;
    getContractFactory(
      name: "TenantConfigStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TenantConfigStorage__factory>;
    getContractFactory(
      name: "EmergencyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyManager__factory>;
    getContractFactory(
      name: "MultisigManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultisigManager__factory>;
    getContractFactory(
      name: "MultisigModifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultisigModifier__factory>;
    getContractFactory(
      name: "BoundsChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoundsChecker__factory>;
    getContractFactory(
      name: "ComplianceChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceChecker__factory>;
    getContractFactory(
      name: "CredentialTypeManagerSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CredentialTypeManagerSimple__factory>;
    getContractFactory(
      name: "FeatureFlags",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeatureFlags__factory>;
    getContractFactory(
      name: "InputValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InputValidator__factory>;
    getContractFactory(
      name: "JurisdictionConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JurisdictionConfig__factory>;
    getContractFactory(
      name: "VersionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VersionManager__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "AuthorizationManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorizationManager>;
    getContractAt(
      name: "BatchOperationsSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchOperationsSimple>;
    getContractAt(
      name: "DIDManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DIDManager>;
    getContractAt(
      name: "KYCManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KYCManager>;
    getContractAt(
      name: "MultisigExample",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultisigExample>;
    getContractAt(
      name: "GovernanceManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceManager>;
    getContractAt(
      name: "AuditLogStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AuditLogStorage>;
    getContractAt(
      name: "DIDCredentialStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DIDCredentialStorage>;
    getContractAt(
      name: "KYCDataStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KYCDataStorage>;
    getContractAt(
      name: "TenantConfigStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TenantConfigStorage>;
    getContractAt(
      name: "EmergencyManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyManager>;
    getContractAt(
      name: "MultisigManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultisigManager>;
    getContractAt(
      name: "MultisigModifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultisigModifier>;
    getContractAt(
      name: "BoundsChecker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoundsChecker>;
    getContractAt(
      name: "ComplianceChecker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceChecker>;
    getContractAt(
      name: "CredentialTypeManagerSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CredentialTypeManagerSimple>;
    getContractAt(
      name: "FeatureFlags",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeatureFlags>;
    getContractAt(
      name: "InputValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InputValidator>;
    getContractAt(
      name: "JurisdictionConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.JurisdictionConfig>;
    getContractAt(
      name: "VersionManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VersionManager>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "AuthorizationManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuthorizationManager>;
    deployContract(
      name: "BatchOperationsSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchOperationsSimple>;
    deployContract(
      name: "DIDManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DIDManager>;
    deployContract(
      name: "KYCManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KYCManager>;
    deployContract(
      name: "MultisigExample",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultisigExample>;
    deployContract(
      name: "GovernanceManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceManager>;
    deployContract(
      name: "AuditLogStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuditLogStorage>;
    deployContract(
      name: "DIDCredentialStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DIDCredentialStorage>;
    deployContract(
      name: "KYCDataStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KYCDataStorage>;
    deployContract(
      name: "TenantConfigStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TenantConfigStorage>;
    deployContract(
      name: "EmergencyManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmergencyManager>;
    deployContract(
      name: "MultisigManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultisigManager>;
    deployContract(
      name: "MultisigModifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultisigModifier>;
    deployContract(
      name: "BoundsChecker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoundsChecker>;
    deployContract(
      name: "ComplianceChecker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceChecker>;
    deployContract(
      name: "CredentialTypeManagerSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CredentialTypeManagerSimple>;
    deployContract(
      name: "FeatureFlags",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeatureFlags>;
    deployContract(
      name: "InputValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InputValidator>;
    deployContract(
      name: "JurisdictionConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JurisdictionConfig>;
    deployContract(
      name: "VersionManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionManager>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "AuthorizationManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuthorizationManager>;
    deployContract(
      name: "BatchOperationsSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchOperationsSimple>;
    deployContract(
      name: "DIDManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DIDManager>;
    deployContract(
      name: "KYCManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KYCManager>;
    deployContract(
      name: "MultisigExample",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultisigExample>;
    deployContract(
      name: "GovernanceManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceManager>;
    deployContract(
      name: "AuditLogStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuditLogStorage>;
    deployContract(
      name: "DIDCredentialStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DIDCredentialStorage>;
    deployContract(
      name: "KYCDataStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KYCDataStorage>;
    deployContract(
      name: "TenantConfigStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TenantConfigStorage>;
    deployContract(
      name: "EmergencyManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmergencyManager>;
    deployContract(
      name: "MultisigManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultisigManager>;
    deployContract(
      name: "MultisigModifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultisigModifier>;
    deployContract(
      name: "BoundsChecker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoundsChecker>;
    deployContract(
      name: "ComplianceChecker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceChecker>;
    deployContract(
      name: "CredentialTypeManagerSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CredentialTypeManagerSimple>;
    deployContract(
      name: "FeatureFlags",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeatureFlags>;
    deployContract(
      name: "InputValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InputValidator>;
    deployContract(
      name: "JurisdictionConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JurisdictionConfig>;
    deployContract(
      name: "VersionManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionManager>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
