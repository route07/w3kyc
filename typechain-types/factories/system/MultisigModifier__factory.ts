/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MultisigModifier,
  MultisigModifierInterface,
} from "../../system/MultisigModifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_multisigManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldManager",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "MultisigManagerUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "multisigManager",
    outputs: [
      {
        internalType: "contract MultisigManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_multisigManager",
        type: "address",
      },
    ],
    name: "setMultisigManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161026038038061026083398101604081905261002f91610072565b600180546001600160a01b031916331790556001600160a01b0381161561006c57600080546001600160a01b0319166001600160a01b0383161790555b506100a2565b60006020828403121561008457600080fd5b81516001600160a01b038116811461009b57600080fd5b9392505050565b6101af806100b16000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638da5cb5b146100465780639fbdb77514610075578063f4692e0914610088575b600080fd5b600154610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600054610059906001600160a01b031681565b61009b610096366004610149565b61009d565b005b6001546001600160a01b031633146100e85760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f23e0a616efc76d766195373e42d10e0dcd75d41363639187f5e5e5580726d0fd910160405180910390a15050565b60006020828403121561015b57600080fd5b81356001600160a01b038116811461017257600080fd5b939250505056fea2646970667358221220dff1716dd6dbeed5ac47a34cf4156b5895efd90927b0d6674ef3a6979156347764736f6c63430008130033";

type MultisigModifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultisigModifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultisigModifier__factory extends ContractFactory {
  constructor(...args: MultisigModifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _multisigManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_multisigManager, overrides || {});
  }
  override deploy(
    _multisigManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_multisigManager, overrides || {}) as Promise<
      MultisigModifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MultisigModifier__factory {
    return super.connect(runner) as MultisigModifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultisigModifierInterface {
    return new Interface(_abi) as MultisigModifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MultisigModifier {
    return new Contract(address, _abi, runner) as unknown as MultisigModifier;
  }
}
