/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MultisigManager {
  export type MultisigConfigStruct = {
    isEnabled: boolean;
    requiredSignatures: BigNumberish;
    timelockDuration: BigNumberish;
    isActive: boolean;
  };

  export type MultisigConfigStructOutput = [
    isEnabled: boolean,
    requiredSignatures: bigint,
    timelockDuration: bigint,
    isActive: boolean
  ] & {
    isEnabled: boolean;
    requiredSignatures: bigint;
    timelockDuration: bigint;
    isActive: boolean;
  };
}

export interface MultisigExampleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "configString"
      | "configValue"
      | "disableMultisigForActiveStatus"
      | "disableMultisigForConfigString"
      | "disableMultisigForConfigValue"
      | "enableMultisigForActiveStatus"
      | "enableMultisigForConfigString"
      | "enableMultisigForConfigValue"
      | "getActiveStatusMultisigConfig"
      | "getConfigStringMultisigConfig"
      | "getConfigValueMultisigConfig"
      | "getConfiguration"
      | "isActive"
      | "isActiveStatusMultisigRequired"
      | "isConfigStringMultisigRequired"
      | "isConfigValueMultisigRequired"
      | "isMultisigManagerSet"
      | "multisigManager"
      | "owner"
      | "setMultisigManager"
      | "updateActiveStatus"
      | "updateConfigString"
      | "updateConfigValue"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActiveStatusUpdated"
      | "ConfigStringUpdated"
      | "ConfigValueUpdated"
      | "MultisigManagerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "configString",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableMultisigForActiveStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableMultisigForConfigString",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableMultisigForConfigValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableMultisigForActiveStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMultisigForConfigString",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMultisigForConfigValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveStatusMultisigConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigStringMultisigConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigValueMultisigConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isActiveStatusMultisigRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConfigStringMultisigRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConfigValueMultisigRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMultisigManagerSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multisigManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMultisigManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateActiveStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfigString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfigValue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableMultisigForActiveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableMultisigForConfigString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableMultisigForConfigValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableMultisigForActiveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableMultisigForConfigString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableMultisigForConfigValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveStatusMultisigConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigStringMultisigConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigValueMultisigConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActiveStatusMultisigRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfigStringMultisigRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfigValueMultisigRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMultisigManagerSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multisigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultisigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateActiveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfigString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfigValue",
    data: BytesLike
  ): Result;
}

export namespace ActiveStatusUpdatedEvent {
  export type InputTuple = [oldStatus: boolean, newStatus: boolean];
  export type OutputTuple = [oldStatus: boolean, newStatus: boolean];
  export interface OutputObject {
    oldStatus: boolean;
    newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigStringUpdatedEvent {
  export type InputTuple = [oldValue: string, newValue: string];
  export type OutputTuple = [oldValue: string, newValue: string];
  export interface OutputObject {
    oldValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigValueUpdatedEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultisigManagerUpdatedEvent {
  export type InputTuple = [oldManager: AddressLike, newManager: AddressLike];
  export type OutputTuple = [oldManager: string, newManager: string];
  export interface OutputObject {
    oldManager: string;
    newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultisigExample extends BaseContract {
  connect(runner?: ContractRunner | null): MultisigExample;
  waitForDeployment(): Promise<this>;

  interface: MultisigExampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  configString: TypedContractMethod<[], [string], "view">;

  configValue: TypedContractMethod<[], [bigint], "view">;

  disableMultisigForActiveStatus: TypedContractMethod<[], [void], "nonpayable">;

  disableMultisigForConfigString: TypedContractMethod<[], [void], "nonpayable">;

  disableMultisigForConfigValue: TypedContractMethod<[], [void], "nonpayable">;

  enableMultisigForActiveStatus: TypedContractMethod<
    [requiredSignatures: BigNumberish, timelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  enableMultisigForConfigString: TypedContractMethod<
    [requiredSignatures: BigNumberish, timelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  enableMultisigForConfigValue: TypedContractMethod<
    [requiredSignatures: BigNumberish, timelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveStatusMultisigConfig: TypedContractMethod<
    [],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;

  getConfigStringMultisigConfig: TypedContractMethod<
    [],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;

  getConfigValueMultisigConfig: TypedContractMethod<
    [],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;

  getConfiguration: TypedContractMethod<
    [],
    [
      [bigint, string, boolean] & {
        value: bigint;
        stringValue: string;
        active: boolean;
      }
    ],
    "view"
  >;

  isActive: TypedContractMethod<[], [boolean], "view">;

  isActiveStatusMultisigRequired: TypedContractMethod<[], [boolean], "view">;

  isConfigStringMultisigRequired: TypedContractMethod<[], [boolean], "view">;

  isConfigValueMultisigRequired: TypedContractMethod<[], [boolean], "view">;

  isMultisigManagerSet: TypedContractMethod<[], [boolean], "view">;

  multisigManager: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setMultisigManager: TypedContractMethod<
    [_multisigManager: AddressLike],
    [void],
    "nonpayable"
  >;

  updateActiveStatus: TypedContractMethod<
    [newStatus: boolean],
    [void],
    "nonpayable"
  >;

  updateConfigString: TypedContractMethod<
    [newString: string],
    [void],
    "nonpayable"
  >;

  updateConfigValue: TypedContractMethod<
    [newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "configString"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "configValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disableMultisigForActiveStatus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableMultisigForConfigString"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableMultisigForConfigValue"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableMultisigForActiveStatus"
  ): TypedContractMethod<
    [requiredSignatures: BigNumberish, timelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableMultisigForConfigString"
  ): TypedContractMethod<
    [requiredSignatures: BigNumberish, timelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableMultisigForConfigValue"
  ): TypedContractMethod<
    [requiredSignatures: BigNumberish, timelockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveStatusMultisigConfig"
  ): TypedContractMethod<
    [],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfigStringMultisigConfig"
  ): TypedContractMethod<
    [],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfigValueMultisigConfig"
  ): TypedContractMethod<
    [],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, boolean] & {
        value: bigint;
        stringValue: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isActiveStatusMultisigRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isConfigStringMultisigRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isConfigValueMultisigRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMultisigManagerSet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "multisigManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMultisigManager"
  ): TypedContractMethod<[_multisigManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateActiveStatus"
  ): TypedContractMethod<[newStatus: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfigString"
  ): TypedContractMethod<[newString: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfigValue"
  ): TypedContractMethod<[newValue: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ActiveStatusUpdated"
  ): TypedContractEvent<
    ActiveStatusUpdatedEvent.InputTuple,
    ActiveStatusUpdatedEvent.OutputTuple,
    ActiveStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigStringUpdated"
  ): TypedContractEvent<
    ConfigStringUpdatedEvent.InputTuple,
    ConfigStringUpdatedEvent.OutputTuple,
    ConfigStringUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigValueUpdated"
  ): TypedContractEvent<
    ConfigValueUpdatedEvent.InputTuple,
    ConfigValueUpdatedEvent.OutputTuple,
    ConfigValueUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MultisigManagerUpdated"
  ): TypedContractEvent<
    MultisigManagerUpdatedEvent.InputTuple,
    MultisigManagerUpdatedEvent.OutputTuple,
    MultisigManagerUpdatedEvent.OutputObject
  >;

  filters: {
    "ActiveStatusUpdated(bool,bool)": TypedContractEvent<
      ActiveStatusUpdatedEvent.InputTuple,
      ActiveStatusUpdatedEvent.OutputTuple,
      ActiveStatusUpdatedEvent.OutputObject
    >;
    ActiveStatusUpdated: TypedContractEvent<
      ActiveStatusUpdatedEvent.InputTuple,
      ActiveStatusUpdatedEvent.OutputTuple,
      ActiveStatusUpdatedEvent.OutputObject
    >;

    "ConfigStringUpdated(string,string)": TypedContractEvent<
      ConfigStringUpdatedEvent.InputTuple,
      ConfigStringUpdatedEvent.OutputTuple,
      ConfigStringUpdatedEvent.OutputObject
    >;
    ConfigStringUpdated: TypedContractEvent<
      ConfigStringUpdatedEvent.InputTuple,
      ConfigStringUpdatedEvent.OutputTuple,
      ConfigStringUpdatedEvent.OutputObject
    >;

    "ConfigValueUpdated(uint256,uint256)": TypedContractEvent<
      ConfigValueUpdatedEvent.InputTuple,
      ConfigValueUpdatedEvent.OutputTuple,
      ConfigValueUpdatedEvent.OutputObject
    >;
    ConfigValueUpdated: TypedContractEvent<
      ConfigValueUpdatedEvent.InputTuple,
      ConfigValueUpdatedEvent.OutputTuple,
      ConfigValueUpdatedEvent.OutputObject
    >;

    "MultisigManagerUpdated(address,address)": TypedContractEvent<
      MultisigManagerUpdatedEvent.InputTuple,
      MultisigManagerUpdatedEvent.OutputTuple,
      MultisigManagerUpdatedEvent.OutputObject
    >;
    MultisigManagerUpdated: TypedContractEvent<
      MultisigManagerUpdatedEvent.InputTuple,
      MultisigManagerUpdatedEvent.OutputTuple,
      MultisigManagerUpdatedEvent.OutputObject
    >;
  };
}
