/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace TenantConfigStorage {
  export type TenantLimitsStruct = {
    maxUsers: BigNumberish;
    maxVerificationsPerDay: BigNumberish;
    maxVerificationsPerMonth: BigNumberish;
    maxStorageGB: BigNumberish;
  };

  export type TenantLimitsStructOutput = [
    maxUsers: bigint,
    maxVerificationsPerDay: bigint,
    maxVerificationsPerMonth: bigint,
    maxStorageGB: bigint
  ] & {
    maxUsers: bigint;
    maxVerificationsPerDay: bigint;
    maxVerificationsPerMonth: bigint;
    maxStorageGB: bigint;
  };

  export type TenantStatsStruct = {
    totalUsers: BigNumberish;
    activeUsers: BigNumberish;
    totalVerifications: BigNumberish;
    lastActivity: BigNumberish;
  };

  export type TenantStatsStructOutput = [
    totalUsers: bigint,
    activeUsers: bigint,
    totalVerifications: bigint,
    lastActivity: bigint
  ] & {
    totalUsers: bigint;
    activeUsers: bigint;
    totalVerifications: bigint;
    lastActivity: bigint;
  };
}

export interface TenantConfigStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "activeTenants"
      | "adminTenants"
      | "allTenants"
      | "authorizedWriters"
      | "deactivateTenant"
      | "getActiveTenantCount"
      | "getActiveTenants"
      | "getAdminTenants"
      | "getAllTenants"
      | "getTenantConfig"
      | "getTenantCount"
      | "getTenantLimits"
      | "getTenantSetting"
      | "getTenantStats"
      | "incrementVerificationCount"
      | "isAuthorizedWriter"
      | "isTenantActive"
      | "isTenantExists"
      | "owner"
      | "reactivateTenant"
      | "registerTenant"
      | "setAuthorizedWriter"
      | "tenantConfigs"
      | "tenantExists"
      | "tenantLimits"
      | "tenantStats"
      | "updateTenantAdmin"
      | "updateTenantConfig"
      | "updateTenantLimits"
      | "updateTenantSetting"
      | "updateTenantStats"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "TenantAdminChanged"
      | "TenantConfigUpdated"
      | "TenantDeactivated"
      | "TenantLimitsUpdated"
      | "TenantReactivated"
      | "TenantRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeTenants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminTenants",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allTenants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateTenant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTenantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTenants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminTenants",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTenants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantLimits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantSetting",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementVerificationCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTenantActive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTenantExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivateTenant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTenant",
    values: [
      string,
      string,
      string[],
      BigNumberish,
      string[],
      AddressLike,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tenantConfigs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tenantExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tenantLimits",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tenantStats", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateTenantAdmin",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTenantConfig",
    values: [string, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTenantLimits",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTenantSetting",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTenantStats",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeTenants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminTenants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allTenants", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateTenant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTenantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTenants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminTenants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTenants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantSetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementVerificationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTenantActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTenantExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivateTenant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTenant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTenantAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTenantConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTenantLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTenantSetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTenantStats",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TenantAdminChangedEvent {
  export type InputTuple = [
    tenantId: string,
    oldAdmin: AddressLike,
    newAdmin: AddressLike
  ];
  export type OutputTuple = [
    tenantId: string,
    oldAdmin: string,
    newAdmin: string
  ];
  export interface OutputObject {
    tenantId: string;
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TenantConfigUpdatedEvent {
  export type InputTuple = [tenantId: string, field: string, value: string];
  export type OutputTuple = [tenantId: string, field: string, value: string];
  export interface OutputObject {
    tenantId: string;
    field: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TenantDeactivatedEvent {
  export type InputTuple = [tenantId: string];
  export type OutputTuple = [tenantId: string];
  export interface OutputObject {
    tenantId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TenantLimitsUpdatedEvent {
  export type InputTuple = [
    tenantId: string,
    field: string,
    value: BigNumberish
  ];
  export type OutputTuple = [tenantId: string, field: string, value: bigint];
  export interface OutputObject {
    tenantId: string;
    field: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TenantReactivatedEvent {
  export type InputTuple = [tenantId: string];
  export type OutputTuple = [tenantId: string];
  export interface OutputObject {
    tenantId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TenantRegisteredEvent {
  export type InputTuple = [
    tenantId: string,
    name: string,
    admin: AddressLike,
    maxRiskScore: BigNumberish
  ];
  export type OutputTuple = [
    tenantId: string,
    name: string,
    admin: string,
    maxRiskScore: bigint
  ];
  export interface OutputObject {
    tenantId: string;
    name: string;
    admin: string;
    maxRiskScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TenantConfigStorage extends BaseContract {
  connect(runner?: ContractRunner | null): TenantConfigStorage;
  waitForDeployment(): Promise<this>;

  interface: TenantConfigStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  activeTenants: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  adminTenants: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  allTenants: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  deactivateTenant: TypedContractMethod<
    [tenantId: string],
    [void],
    "nonpayable"
  >;

  getActiveTenantCount: TypedContractMethod<[], [bigint], "view">;

  getActiveTenants: TypedContractMethod<[], [string[]], "view">;

  getAdminTenants: TypedContractMethod<
    [admin: AddressLike],
    [string[]],
    "view"
  >;

  getAllTenants: TypedContractMethod<[], [string[]], "view">;

  getTenantConfig: TypedContractMethod<
    [tenantId: string],
    [
      [string, string[], bigint, string[], boolean, string] & {
        name: string;
        requiredCredentials: string[];
        maxRiskScore: bigint;
        allowedJurisdictions: string[];
        isActive: boolean;
        admin: string;
      }
    ],
    "view"
  >;

  getTenantCount: TypedContractMethod<[], [bigint], "view">;

  getTenantLimits: TypedContractMethod<
    [tenantId: string],
    [TenantConfigStorage.TenantLimitsStructOutput],
    "view"
  >;

  getTenantSetting: TypedContractMethod<
    [tenantId: string, key: string],
    [string],
    "view"
  >;

  getTenantStats: TypedContractMethod<
    [tenantId: string],
    [TenantConfigStorage.TenantStatsStructOutput],
    "view"
  >;

  incrementVerificationCount: TypedContractMethod<
    [tenantId: string],
    [void],
    "nonpayable"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isTenantActive: TypedContractMethod<[tenantId: string], [boolean], "view">;

  isTenantExists: TypedContractMethod<[tenantId: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reactivateTenant: TypedContractMethod<
    [tenantId: string],
    [void],
    "nonpayable"
  >;

  registerTenant: TypedContractMethod<
    [
      tenantId: string,
      name: string,
      requiredCredentials: string[],
      maxRiskScore: BigNumberish,
      allowedJurisdictions: string[],
      admin: AddressLike,
      customFields: string[]
    ],
    [void],
    "nonpayable"
  >;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  tenantConfigs: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean, bigint, string] & {
        tenantId: string;
        name: string;
        maxRiskScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        admin: string;
      }
    ],
    "view"
  >;

  tenantExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  tenantLimits: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint] & {
        maxUsers: bigint;
        maxVerificationsPerDay: bigint;
        maxVerificationsPerMonth: bigint;
        maxStorageGB: bigint;
      }
    ],
    "view"
  >;

  tenantStats: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUsers: bigint;
        activeUsers: bigint;
        totalVerifications: bigint;
        lastActivity: bigint;
      }
    ],
    "view"
  >;

  updateTenantAdmin: TypedContractMethod<
    [tenantId: string, newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTenantConfig: TypedContractMethod<
    [
      tenantId: string,
      name: string,
      maxRiskScore: BigNumberish,
      allowedJurisdictions: string[]
    ],
    [void],
    "nonpayable"
  >;

  updateTenantLimits: TypedContractMethod<
    [
      tenantId: string,
      maxUsers: BigNumberish,
      maxVerificationsPerDay: BigNumberish,
      maxVerificationsPerMonth: BigNumberish,
      maxStorageGB: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateTenantSetting: TypedContractMethod<
    [tenantId: string, key: string, value: string],
    [void],
    "nonpayable"
  >;

  updateTenantStats: TypedContractMethod<
    [
      tenantId: string,
      totalUsers: BigNumberish,
      activeUsers: BigNumberish,
      totalVerifications: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeTenants"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "adminTenants"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "allTenants"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateTenant"
  ): TypedContractMethod<[tenantId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveTenantCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActiveTenants"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAdminTenants"
  ): TypedContractMethod<[admin: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllTenants"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTenantConfig"
  ): TypedContractMethod<
    [tenantId: string],
    [
      [string, string[], bigint, string[], boolean, string] & {
        name: string;
        requiredCredentials: string[];
        maxRiskScore: bigint;
        allowedJurisdictions: string[];
        isActive: boolean;
        admin: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTenantCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTenantLimits"
  ): TypedContractMethod<
    [tenantId: string],
    [TenantConfigStorage.TenantLimitsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTenantSetting"
  ): TypedContractMethod<[tenantId: string, key: string], [string], "view">;
  getFunction(
    nameOrSignature: "getTenantStats"
  ): TypedContractMethod<
    [tenantId: string],
    [TenantConfigStorage.TenantStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementVerificationCount"
  ): TypedContractMethod<[tenantId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTenantActive"
  ): TypedContractMethod<[tenantId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTenantExists"
  ): TypedContractMethod<[tenantId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reactivateTenant"
  ): TypedContractMethod<[tenantId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerTenant"
  ): TypedContractMethod<
    [
      tenantId: string,
      name: string,
      requiredCredentials: string[],
      maxRiskScore: BigNumberish,
      allowedJurisdictions: string[],
      admin: AddressLike,
      customFields: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tenantConfigs"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean, bigint, string] & {
        tenantId: string;
        name: string;
        maxRiskScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        admin: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tenantExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "tenantLimits"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint] & {
        maxUsers: bigint;
        maxVerificationsPerDay: bigint;
        maxVerificationsPerMonth: bigint;
        maxStorageGB: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tenantStats"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUsers: bigint;
        activeUsers: bigint;
        totalVerifications: bigint;
        lastActivity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateTenantAdmin"
  ): TypedContractMethod<
    [tenantId: string, newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTenantConfig"
  ): TypedContractMethod<
    [
      tenantId: string,
      name: string,
      maxRiskScore: BigNumberish,
      allowedJurisdictions: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTenantLimits"
  ): TypedContractMethod<
    [
      tenantId: string,
      maxUsers: BigNumberish,
      maxVerificationsPerDay: BigNumberish,
      maxVerificationsPerMonth: BigNumberish,
      maxStorageGB: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTenantSetting"
  ): TypedContractMethod<
    [tenantId: string, key: string, value: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTenantStats"
  ): TypedContractMethod<
    [
      tenantId: string,
      totalUsers: BigNumberish,
      activeUsers: BigNumberish,
      totalVerifications: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TenantAdminChanged"
  ): TypedContractEvent<
    TenantAdminChangedEvent.InputTuple,
    TenantAdminChangedEvent.OutputTuple,
    TenantAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "TenantConfigUpdated"
  ): TypedContractEvent<
    TenantConfigUpdatedEvent.InputTuple,
    TenantConfigUpdatedEvent.OutputTuple,
    TenantConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TenantDeactivated"
  ): TypedContractEvent<
    TenantDeactivatedEvent.InputTuple,
    TenantDeactivatedEvent.OutputTuple,
    TenantDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "TenantLimitsUpdated"
  ): TypedContractEvent<
    TenantLimitsUpdatedEvent.InputTuple,
    TenantLimitsUpdatedEvent.OutputTuple,
    TenantLimitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TenantReactivated"
  ): TypedContractEvent<
    TenantReactivatedEvent.InputTuple,
    TenantReactivatedEvent.OutputTuple,
    TenantReactivatedEvent.OutputObject
  >;
  getEvent(
    key: "TenantRegistered"
  ): TypedContractEvent<
    TenantRegisteredEvent.InputTuple,
    TenantRegisteredEvent.OutputTuple,
    TenantRegisteredEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "TenantAdminChanged(string,address,address)": TypedContractEvent<
      TenantAdminChangedEvent.InputTuple,
      TenantAdminChangedEvent.OutputTuple,
      TenantAdminChangedEvent.OutputObject
    >;
    TenantAdminChanged: TypedContractEvent<
      TenantAdminChangedEvent.InputTuple,
      TenantAdminChangedEvent.OutputTuple,
      TenantAdminChangedEvent.OutputObject
    >;

    "TenantConfigUpdated(string,string,string)": TypedContractEvent<
      TenantConfigUpdatedEvent.InputTuple,
      TenantConfigUpdatedEvent.OutputTuple,
      TenantConfigUpdatedEvent.OutputObject
    >;
    TenantConfigUpdated: TypedContractEvent<
      TenantConfigUpdatedEvent.InputTuple,
      TenantConfigUpdatedEvent.OutputTuple,
      TenantConfigUpdatedEvent.OutputObject
    >;

    "TenantDeactivated(string)": TypedContractEvent<
      TenantDeactivatedEvent.InputTuple,
      TenantDeactivatedEvent.OutputTuple,
      TenantDeactivatedEvent.OutputObject
    >;
    TenantDeactivated: TypedContractEvent<
      TenantDeactivatedEvent.InputTuple,
      TenantDeactivatedEvent.OutputTuple,
      TenantDeactivatedEvent.OutputObject
    >;

    "TenantLimitsUpdated(string,string,uint256)": TypedContractEvent<
      TenantLimitsUpdatedEvent.InputTuple,
      TenantLimitsUpdatedEvent.OutputTuple,
      TenantLimitsUpdatedEvent.OutputObject
    >;
    TenantLimitsUpdated: TypedContractEvent<
      TenantLimitsUpdatedEvent.InputTuple,
      TenantLimitsUpdatedEvent.OutputTuple,
      TenantLimitsUpdatedEvent.OutputObject
    >;

    "TenantReactivated(string)": TypedContractEvent<
      TenantReactivatedEvent.InputTuple,
      TenantReactivatedEvent.OutputTuple,
      TenantReactivatedEvent.OutputObject
    >;
    TenantReactivated: TypedContractEvent<
      TenantReactivatedEvent.InputTuple,
      TenantReactivatedEvent.OutputTuple,
      TenantReactivatedEvent.OutputObject
    >;

    "TenantRegistered(string,string,address,uint256)": TypedContractEvent<
      TenantRegisteredEvent.InputTuple,
      TenantRegisteredEvent.OutputTuple,
      TenantRegisteredEvent.OutputObject
    >;
    TenantRegistered: TypedContractEvent<
      TenantRegisteredEvent.InputTuple,
      TenantRegisteredEvent.OutputTuple,
      TenantRegisteredEvent.OutputObject
    >;
  };
}
