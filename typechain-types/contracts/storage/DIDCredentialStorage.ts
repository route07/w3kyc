/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DIDCredentialStorage {
  export type CredentialConfigStruct = {
    defaultExpiryDuration: BigNumberish;
    maxAttributesPerCredential: BigNumberish;
    allowCrossJurisdiction: boolean;
    requireIssuerVerification: boolean;
    maxCredentialsPerDID: BigNumberish;
  };

  export type CredentialConfigStructOutput = [
    defaultExpiryDuration: bigint,
    maxAttributesPerCredential: bigint,
    allowCrossJurisdiction: boolean,
    requireIssuerVerification: boolean,
    maxCredentialsPerDID: bigint
  ] & {
    defaultExpiryDuration: bigint;
    maxAttributesPerCredential: bigint;
    allowCrossJurisdiction: boolean;
    requireIssuerVerification: boolean;
    maxCredentialsPerDID: bigint;
  };

  export type DIDCredentialStruct = {
    did: string;
    credentialType: string;
    credentialHash: string;
    jurisdiction: string;
    issuedAt: BigNumberish;
    expiresAt: BigNumberish;
    isRevoked: boolean;
    issuer: AddressLike;
    attributes: string[];
  };

  export type DIDCredentialStructOutput = [
    did: string,
    credentialType: string,
    credentialHash: string,
    jurisdiction: string,
    issuedAt: bigint,
    expiresAt: bigint,
    isRevoked: boolean,
    issuer: string,
    attributes: string[]
  ] & {
    did: string;
    credentialType: string;
    credentialHash: string;
    jurisdiction: string;
    issuedAt: bigint;
    expiresAt: bigint;
    isRevoked: boolean;
    issuer: string;
    attributes: string[];
  };

  export type DIDMetadataStruct = {
    did: string;
    primaryAddress: AddressLike;
    createdAt: BigNumberish;
    isActive: boolean;
    linkedAddresses: string[];
    credentialTypes: string[];
  };

  export type DIDMetadataStructOutput = [
    did: string,
    primaryAddress: string,
    createdAt: bigint,
    isActive: boolean,
    linkedAddresses: string[],
    credentialTypes: string[]
  ] & {
    did: string;
    primaryAddress: string;
    createdAt: bigint;
    isActive: boolean;
    linkedAddresses: string[];
    credentialTypes: string[];
  };
}

export interface DIDCredentialStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "addressToDID"
      | "allowedCredentialTypes"
      | "authorizedIssuers"
      | "authorizedWriters"
      | "credentialConfig"
      | "credentialCount"
      | "didCredentials"
      | "didMetadata"
      | "didToAddresses"
      | "getAddressesForDID"
      | "getCredentialConfig"
      | "getCredentialCount"
      | "getDIDCredentials"
      | "getDIDCredentialsByType"
      | "getDIDForAddress"
      | "getDIDMetadata"
      | "isAuthorizedIssuer"
      | "isAuthorizedWriter"
      | "isCredentialRevoked"
      | "isCredentialValid"
      | "issueCredential"
      | "jurisdictionExpiryDurations"
      | "linkDIDToAddress"
      | "owner"
      | "revokeCredential"
      | "revokedCredentials"
      | "setAllowedCredentialType"
      | "setAuthorizedIssuer"
      | "setAuthorizedWriter"
      | "unlinkDIDFromAddress"
      | "updateCredentialConfig"
      | "updateJurisdictionConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedIssuerUpdated"
      | "AuthorizedWriterUpdated"
      | "CredentialConfigUpdated"
      | "CredentialIssued"
      | "CredentialRevoked"
      | "DIDLinked"
      | "DIDUnlinked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressToDID",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedCredentialTypes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedIssuers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credentialConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "credentialCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "didCredentials",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "didMetadata", values: [string]): string;
  encodeFunctionData(
    functionFragment: "didToAddresses",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressesForDID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredentialConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCredentialCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDIDCredentials",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDIDCredentialsByType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDIDForAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDIDMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCredentialRevoked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCredentialValid",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCredential",
    values: [string, string, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionExpiryDurations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "linkDIDToAddress",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeCredential",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedCredentials",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedCredentialType",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedIssuer",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkDIDFromAddress",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCredentialConfig",
    values: [BigNumberish, BigNumberish, boolean, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJurisdictionConfig",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedCredentialTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credentialConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credentialCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didToAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesForDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredentialConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredentialCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDIDCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDIDCredentialsByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDIDForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDIDMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCredentialRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCredentialValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionExpiryDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkDIDToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokedCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedCredentialType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkDIDFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCredentialConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJurisdictionConfig",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedIssuerUpdatedEvent {
  export type InputTuple = [issuer: AddressLike, authorized: boolean];
  export type OutputTuple = [issuer: string, authorized: boolean];
  export interface OutputObject {
    issuer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialConfigUpdatedEvent {
  export type InputTuple = [
    field: string,
    oldValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [field: string, oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    field: string;
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialIssuedEvent {
  export type InputTuple = [
    did: string,
    credentialType: string,
    jurisdiction: string,
    issuer: AddressLike,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    credentialType: string,
    jurisdiction: string,
    issuer: string,
    expiresAt: bigint
  ];
  export interface OutputObject {
    did: string;
    credentialType: string;
    jurisdiction: string;
    issuer: string;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialRevokedEvent {
  export type InputTuple = [
    did: string,
    credentialHash: string,
    revoker: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    credentialHash: string,
    revoker: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    did: string;
    credentialHash: string;
    revoker: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDLinkedEvent {
  export type InputTuple = [
    did: string,
    address_: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, address_: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    address_: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDUnlinkedEvent {
  export type InputTuple = [
    did: string,
    address_: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, address_: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    address_: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DIDCredentialStorage extends BaseContract {
  connect(runner?: ContractRunner | null): DIDCredentialStorage;
  waitForDeployment(): Promise<this>;

  interface: DIDCredentialStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  addressToDID: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  allowedCredentialTypes: TypedContractMethod<
    [arg0: string],
    [boolean],
    "view"
  >;

  authorizedIssuers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  credentialConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean, bigint] & {
        defaultExpiryDuration: bigint;
        maxAttributesPerCredential: bigint;
        allowCrossJurisdiction: boolean;
        requireIssuerVerification: boolean;
        maxCredentialsPerDID: bigint;
      }
    ],
    "view"
  >;

  credentialCount: TypedContractMethod<[arg0: string], [bigint], "view">;

  didCredentials: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, boolean, string] & {
        did: string;
        credentialType: string;
        credentialHash: string;
        jurisdiction: string;
        issuedAt: bigint;
        expiresAt: bigint;
        isRevoked: boolean;
        issuer: string;
      }
    ],
    "view"
  >;

  didMetadata: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean] & {
        did: string;
        primaryAddress: string;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  didToAddresses: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [string],
    "view"
  >;

  getAddressesForDID: TypedContractMethod<[did: string], [string[]], "view">;

  getCredentialConfig: TypedContractMethod<
    [],
    [DIDCredentialStorage.CredentialConfigStructOutput],
    "view"
  >;

  getCredentialCount: TypedContractMethod<[did: string], [bigint], "view">;

  getDIDCredentials: TypedContractMethod<
    [did: string],
    [DIDCredentialStorage.DIDCredentialStructOutput[]],
    "view"
  >;

  getDIDCredentialsByType: TypedContractMethod<
    [did: string, credentialType: string],
    [DIDCredentialStorage.DIDCredentialStructOutput[]],
    "view"
  >;

  getDIDForAddress: TypedContractMethod<
    [address_: AddressLike],
    [string],
    "view"
  >;

  getDIDMetadata: TypedContractMethod<
    [did: string],
    [DIDCredentialStorage.DIDMetadataStructOutput],
    "view"
  >;

  isAuthorizedIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isCredentialRevoked: TypedContractMethod<
    [credentialHash: string],
    [boolean],
    "view"
  >;

  isCredentialValid: TypedContractMethod<
    [did: string, credentialHash: string],
    [boolean],
    "view"
  >;

  issueCredential: TypedContractMethod<
    [
      did: string,
      credentialType: string,
      credentialHash: string,
      jurisdiction: string,
      attributes: string[]
    ],
    [void],
    "nonpayable"
  >;

  jurisdictionExpiryDurations: TypedContractMethod<
    [arg0: string],
    [bigint],
    "view"
  >;

  linkDIDToAddress: TypedContractMethod<
    [did: string, address_: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  revokeCredential: TypedContractMethod<
    [did: string, credentialHash: string],
    [void],
    "nonpayable"
  >;

  revokedCredentials: TypedContractMethod<[arg0: string], [boolean], "view">;

  setAllowedCredentialType: TypedContractMethod<
    [credentialType: string, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setAuthorizedIssuer: TypedContractMethod<
    [issuer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  unlinkDIDFromAddress: TypedContractMethod<
    [did: string, address_: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCredentialConfig: TypedContractMethod<
    [
      _defaultExpiryDuration: BigNumberish,
      _maxAttributesPerCredential: BigNumberish,
      _allowCrossJurisdiction: boolean,
      _requireIssuerVerification: boolean,
      _maxCredentialsPerDID: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateJurisdictionConfig: TypedContractMethod<
    [jurisdiction: string, expiryDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressToDID"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "allowedCredentialTypes"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedIssuers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "credentialConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean, bigint] & {
        defaultExpiryDuration: bigint;
        maxAttributesPerCredential: bigint;
        allowCrossJurisdiction: boolean;
        requireIssuerVerification: boolean;
        maxCredentialsPerDID: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "credentialCount"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "didCredentials"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, boolean, string] & {
        did: string;
        credentialType: string;
        credentialHash: string;
        jurisdiction: string;
        issuedAt: bigint;
        expiresAt: bigint;
        isRevoked: boolean;
        issuer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "didMetadata"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean] & {
        did: string;
        primaryAddress: string;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "didToAddresses"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressesForDID"
  ): TypedContractMethod<[did: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCredentialConfig"
  ): TypedContractMethod<
    [],
    [DIDCredentialStorage.CredentialConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCredentialCount"
  ): TypedContractMethod<[did: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDIDCredentials"
  ): TypedContractMethod<
    [did: string],
    [DIDCredentialStorage.DIDCredentialStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDIDCredentialsByType"
  ): TypedContractMethod<
    [did: string, credentialType: string],
    [DIDCredentialStorage.DIDCredentialStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDIDForAddress"
  ): TypedContractMethod<[address_: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDIDMetadata"
  ): TypedContractMethod<
    [did: string],
    [DIDCredentialStorage.DIDMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCredentialRevoked"
  ): TypedContractMethod<[credentialHash: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCredentialValid"
  ): TypedContractMethod<
    [did: string, credentialHash: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueCredential"
  ): TypedContractMethod<
    [
      did: string,
      credentialType: string,
      credentialHash: string,
      jurisdiction: string,
      attributes: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "jurisdictionExpiryDurations"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "linkDIDToAddress"
  ): TypedContractMethod<
    [did: string, address_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeCredential"
  ): TypedContractMethod<
    [did: string, credentialHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokedCredentials"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "setAllowedCredentialType"
  ): TypedContractMethod<
    [credentialType: string, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedIssuer"
  ): TypedContractMethod<
    [issuer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlinkDIDFromAddress"
  ): TypedContractMethod<
    [did: string, address_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCredentialConfig"
  ): TypedContractMethod<
    [
      _defaultExpiryDuration: BigNumberish,
      _maxAttributesPerCredential: BigNumberish,
      _allowCrossJurisdiction: boolean,
      _requireIssuerVerification: boolean,
      _maxCredentialsPerDID: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateJurisdictionConfig"
  ): TypedContractMethod<
    [jurisdiction: string, expiryDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizedIssuerUpdated"
  ): TypedContractEvent<
    AuthorizedIssuerUpdatedEvent.InputTuple,
    AuthorizedIssuerUpdatedEvent.OutputTuple,
    AuthorizedIssuerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialConfigUpdated"
  ): TypedContractEvent<
    CredentialConfigUpdatedEvent.InputTuple,
    CredentialConfigUpdatedEvent.OutputTuple,
    CredentialConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialIssued"
  ): TypedContractEvent<
    CredentialIssuedEvent.InputTuple,
    CredentialIssuedEvent.OutputTuple,
    CredentialIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialRevoked"
  ): TypedContractEvent<
    CredentialRevokedEvent.InputTuple,
    CredentialRevokedEvent.OutputTuple,
    CredentialRevokedEvent.OutputObject
  >;
  getEvent(
    key: "DIDLinked"
  ): TypedContractEvent<
    DIDLinkedEvent.InputTuple,
    DIDLinkedEvent.OutputTuple,
    DIDLinkedEvent.OutputObject
  >;
  getEvent(
    key: "DIDUnlinked"
  ): TypedContractEvent<
    DIDUnlinkedEvent.InputTuple,
    DIDUnlinkedEvent.OutputTuple,
    DIDUnlinkedEvent.OutputObject
  >;

  filters: {
    "AuthorizedIssuerUpdated(address,bool)": TypedContractEvent<
      AuthorizedIssuerUpdatedEvent.InputTuple,
      AuthorizedIssuerUpdatedEvent.OutputTuple,
      AuthorizedIssuerUpdatedEvent.OutputObject
    >;
    AuthorizedIssuerUpdated: TypedContractEvent<
      AuthorizedIssuerUpdatedEvent.InputTuple,
      AuthorizedIssuerUpdatedEvent.OutputTuple,
      AuthorizedIssuerUpdatedEvent.OutputObject
    >;

    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "CredentialConfigUpdated(string,uint256,uint256)": TypedContractEvent<
      CredentialConfigUpdatedEvent.InputTuple,
      CredentialConfigUpdatedEvent.OutputTuple,
      CredentialConfigUpdatedEvent.OutputObject
    >;
    CredentialConfigUpdated: TypedContractEvent<
      CredentialConfigUpdatedEvent.InputTuple,
      CredentialConfigUpdatedEvent.OutputTuple,
      CredentialConfigUpdatedEvent.OutputObject
    >;

    "CredentialIssued(string,string,string,address,uint256)": TypedContractEvent<
      CredentialIssuedEvent.InputTuple,
      CredentialIssuedEvent.OutputTuple,
      CredentialIssuedEvent.OutputObject
    >;
    CredentialIssued: TypedContractEvent<
      CredentialIssuedEvent.InputTuple,
      CredentialIssuedEvent.OutputTuple,
      CredentialIssuedEvent.OutputObject
    >;

    "CredentialRevoked(string,string,address,uint256)": TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;
    CredentialRevoked: TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;

    "DIDLinked(string,address,uint256)": TypedContractEvent<
      DIDLinkedEvent.InputTuple,
      DIDLinkedEvent.OutputTuple,
      DIDLinkedEvent.OutputObject
    >;
    DIDLinked: TypedContractEvent<
      DIDLinkedEvent.InputTuple,
      DIDLinkedEvent.OutputTuple,
      DIDLinkedEvent.OutputObject
    >;

    "DIDUnlinked(string,address,uint256)": TypedContractEvent<
      DIDUnlinkedEvent.InputTuple,
      DIDUnlinkedEvent.OutputTuple,
      DIDUnlinkedEvent.OutputObject
    >;
    DIDUnlinked: TypedContractEvent<
      DIDUnlinkedEvent.InputTuple,
      DIDUnlinkedEvent.OutputTuple,
      DIDUnlinkedEvent.OutputObject
    >;
  };
}
