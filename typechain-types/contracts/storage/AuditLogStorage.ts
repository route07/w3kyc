/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AuditLogStorage {
  export type AuditEntryStruct = {
    action: string;
    details: string;
    timestamp: BigNumberish;
    actor: AddressLike;
    tenantId: string;
    jurisdiction: string;
    metadata: string;
  };

  export type AuditEntryStructOutput = [
    action: string,
    details: string,
    timestamp: bigint,
    actor: string,
    tenantId: string,
    jurisdiction: string,
    metadata: string
  ] & {
    action: string;
    details: string;
    timestamp: bigint;
    actor: string;
    tenantId: string;
    jurisdiction: string;
    metadata: string;
  };

  export type AuditConfigStruct = {
    maxEntriesPerUser: BigNumberish;
    maxEntriesPerTenant: BigNumberish;
    maxEntriesPerJurisdiction: BigNumberish;
    enableMetadata: boolean;
    retentionPeriod: BigNumberish;
  };

  export type AuditConfigStructOutput = [
    maxEntriesPerUser: bigint,
    maxEntriesPerTenant: bigint,
    maxEntriesPerJurisdiction: bigint,
    enableMetadata: boolean,
    retentionPeriod: bigint
  ] & {
    maxEntriesPerUser: bigint;
    maxEntriesPerTenant: bigint;
    maxEntriesPerJurisdiction: bigint;
    enableMetadata: boolean;
    retentionPeriod: bigint;
  };
}

export interface AuditLogStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "actionAuditCount"
      | "actionAuditLogs"
      | "auditConfig"
      | "authorizedWriters"
      | "clearOldAuditLogs"
      | "clearUserAuditLogs"
      | "createAuditLog"
      | "createSimpleAuditLog"
      | "getActionAuditCount"
      | "getActionAuditLogs"
      | "getAuditConfig"
      | "getAuditStatistics"
      | "getJurisdictionAuditCount"
      | "getJurisdictionAuditLogs"
      | "getRecentUserAuditLogs"
      | "getTenantAuditCount"
      | "getTenantAuditLogs"
      | "getUserAuditCount"
      | "getUserAuditLogs"
      | "isAuthorizedWriter"
      | "jurisdictionAuditCount"
      | "jurisdictionAuditLogs"
      | "owner"
      | "setAuthorizedWriter"
      | "tenantAuditCount"
      | "tenantAuditLogs"
      | "updateAuditConfig"
      | "userAuditCount"
      | "userAuditLogs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuditConfigUpdated"
      | "AuditLogCreated"
      | "AuditLogsCleared"
      | "AuthorizedWriterUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "actionAuditCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "actionAuditLogs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auditConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearOldAuditLogs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearUserAuditLogs",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuditLog",
    values: [AddressLike, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSimpleAuditLog",
    values: [AddressLike, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionAuditCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionAuditLogs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJurisdictionAuditCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJurisdictionAuditLogs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentUserAuditLogs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantAuditCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantAuditLogs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAuditCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAuditLogs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionAuditCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionAuditLogs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tenantAuditCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tenantAuditLogs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuditConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAuditCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAuditLogs",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "actionAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auditConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearOldAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearUserAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuditLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSimpleAuditLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJurisdictionAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJurisdictionAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentUserAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantAuditLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuditConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuditLogs",
    data: BytesLike
  ): Result;
}

export namespace AuditConfigUpdatedEvent {
  export type InputTuple = [
    field: string,
    oldValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [field: string, oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    field: string;
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditLogCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    action: string,
    tenantId: string,
    jurisdiction: string,
    timestamp: BigNumberish,
    actor: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    action: string,
    tenantId: string,
    jurisdiction: string,
    timestamp: bigint,
    actor: string
  ];
  export interface OutputObject {
    user: string;
    action: string;
    tenantId: string;
    jurisdiction: string;
    timestamp: bigint;
    actor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditLogsClearedEvent {
  export type InputTuple = [user: AddressLike, reason: string];
  export type OutputTuple = [user: string, reason: string];
  export interface OutputObject {
    user: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuditLogStorage extends BaseContract {
  connect(runner?: ContractRunner | null): AuditLogStorage;
  waitForDeployment(): Promise<this>;

  interface: AuditLogStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  actionAuditCount: TypedContractMethod<[arg0: string], [bigint], "view">;

  actionAuditLogs: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;

  auditConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        maxEntriesPerUser: bigint;
        maxEntriesPerTenant: bigint;
        maxEntriesPerJurisdiction: bigint;
        enableMetadata: boolean;
        retentionPeriod: bigint;
      }
    ],
    "view"
  >;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  clearOldAuditLogs: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  clearUserAuditLogs: TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  createAuditLog: TypedContractMethod<
    [
      user: AddressLike,
      action: string,
      details: string,
      tenantId: string,
      jurisdiction: string,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;

  createSimpleAuditLog: TypedContractMethod<
    [
      user: AddressLike,
      action: string,
      details: string,
      tenantId: string,
      jurisdiction: string
    ],
    [void],
    "nonpayable"
  >;

  getActionAuditCount: TypedContractMethod<[action: string], [bigint], "view">;

  getActionAuditLogs: TypedContractMethod<
    [action: string],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;

  getAuditConfig: TypedContractMethod<
    [],
    [AuditLogStorage.AuditConfigStructOutput],
    "view"
  >;

  getAuditStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        userCount: bigint;
        tenantCount: bigint;
        jurisdictionCount: bigint;
        actionCount: bigint;
      }
    ],
    "view"
  >;

  getJurisdictionAuditCount: TypedContractMethod<
    [jurisdiction: string],
    [bigint],
    "view"
  >;

  getJurisdictionAuditLogs: TypedContractMethod<
    [jurisdiction: string],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;

  getRecentUserAuditLogs: TypedContractMethod<
    [user: AddressLike, count: BigNumberish],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;

  getTenantAuditCount: TypedContractMethod<
    [tenantId: string],
    [bigint],
    "view"
  >;

  getTenantAuditLogs: TypedContractMethod<
    [tenantId: string],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;

  getUserAuditCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserAuditLogs: TypedContractMethod<
    [user: AddressLike],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  jurisdictionAuditCount: TypedContractMethod<[arg0: string], [bigint], "view">;

  jurisdictionAuditLogs: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  tenantAuditCount: TypedContractMethod<[arg0: string], [bigint], "view">;

  tenantAuditLogs: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;

  updateAuditConfig: TypedContractMethod<
    [
      _maxEntriesPerUser: BigNumberish,
      _maxEntriesPerTenant: BigNumberish,
      _maxEntriesPerJurisdiction: BigNumberish,
      _enableMetadata: boolean,
      _retentionPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userAuditCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userAuditLogs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "actionAuditCount"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "actionAuditLogs"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "auditConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        maxEntriesPerUser: bigint;
        maxEntriesPerTenant: bigint;
        maxEntriesPerJurisdiction: bigint;
        enableMetadata: boolean;
        retentionPeriod: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "clearOldAuditLogs"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearUserAuditLogs"
  ): TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createAuditLog"
  ): TypedContractMethod<
    [
      user: AddressLike,
      action: string,
      details: string,
      tenantId: string,
      jurisdiction: string,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSimpleAuditLog"
  ): TypedContractMethod<
    [
      user: AddressLike,
      action: string,
      details: string,
      tenantId: string,
      jurisdiction: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActionAuditCount"
  ): TypedContractMethod<[action: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActionAuditLogs"
  ): TypedContractMethod<
    [action: string],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuditConfig"
  ): TypedContractMethod<[], [AuditLogStorage.AuditConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getAuditStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        userCount: bigint;
        tenantCount: bigint;
        jurisdictionCount: bigint;
        actionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJurisdictionAuditCount"
  ): TypedContractMethod<[jurisdiction: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getJurisdictionAuditLogs"
  ): TypedContractMethod<
    [jurisdiction: string],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecentUserAuditLogs"
  ): TypedContractMethod<
    [user: AddressLike, count: BigNumberish],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTenantAuditCount"
  ): TypedContractMethod<[tenantId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTenantAuditLogs"
  ): TypedContractMethod<
    [tenantId: string],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAuditCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAuditLogs"
  ): TypedContractMethod<
    [user: AddressLike],
    [AuditLogStorage.AuditEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "jurisdictionAuditCount"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "jurisdictionAuditLogs"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tenantAuditCount"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "tenantAuditLogs"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateAuditConfig"
  ): TypedContractMethod<
    [
      _maxEntriesPerUser: BigNumberish,
      _maxEntriesPerTenant: BigNumberish,
      _maxEntriesPerJurisdiction: BigNumberish,
      _enableMetadata: boolean,
      _retentionPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userAuditCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userAuditLogs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, string, string, string] & {
        action: string;
        details: string;
        timestamp: bigint;
        actor: string;
        tenantId: string;
        jurisdiction: string;
        metadata: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AuditConfigUpdated"
  ): TypedContractEvent<
    AuditConfigUpdatedEvent.InputTuple,
    AuditConfigUpdatedEvent.OutputTuple,
    AuditConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AuditLogCreated"
  ): TypedContractEvent<
    AuditLogCreatedEvent.InputTuple,
    AuditLogCreatedEvent.OutputTuple,
    AuditLogCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AuditLogsCleared"
  ): TypedContractEvent<
    AuditLogsClearedEvent.InputTuple,
    AuditLogsClearedEvent.OutputTuple,
    AuditLogsClearedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;

  filters: {
    "AuditConfigUpdated(string,uint256,uint256)": TypedContractEvent<
      AuditConfigUpdatedEvent.InputTuple,
      AuditConfigUpdatedEvent.OutputTuple,
      AuditConfigUpdatedEvent.OutputObject
    >;
    AuditConfigUpdated: TypedContractEvent<
      AuditConfigUpdatedEvent.InputTuple,
      AuditConfigUpdatedEvent.OutputTuple,
      AuditConfigUpdatedEvent.OutputObject
    >;

    "AuditLogCreated(address,string,string,string,uint256,address)": TypedContractEvent<
      AuditLogCreatedEvent.InputTuple,
      AuditLogCreatedEvent.OutputTuple,
      AuditLogCreatedEvent.OutputObject
    >;
    AuditLogCreated: TypedContractEvent<
      AuditLogCreatedEvent.InputTuple,
      AuditLogCreatedEvent.OutputTuple,
      AuditLogCreatedEvent.OutputObject
    >;

    "AuditLogsCleared(address,string)": TypedContractEvent<
      AuditLogsClearedEvent.InputTuple,
      AuditLogsClearedEvent.OutputTuple,
      AuditLogsClearedEvent.OutputObject
    >;
    AuditLogsCleared: TypedContractEvent<
      AuditLogsClearedEvent.InputTuple,
      AuditLogsClearedEvent.OutputTuple,
      AuditLogsClearedEvent.OutputObject
    >;

    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
  };
}
