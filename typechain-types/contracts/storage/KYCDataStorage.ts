/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace KYCDataStorage {
  export type KYCConfigStruct = {
    defaultExpiryDuration: BigNumberish;
    maxRiskScore: BigNumberish;
    allowMultipleWallets: boolean;
    maxWalletsPerUser: BigNumberish;
    requireJurisdictionMatch: boolean;
  };

  export type KYCConfigStructOutput = [
    defaultExpiryDuration: bigint,
    maxRiskScore: bigint,
    allowMultipleWallets: boolean,
    maxWalletsPerUser: bigint,
    requireJurisdictionMatch: boolean
  ] & {
    defaultExpiryDuration: bigint;
    maxRiskScore: bigint;
    allowMultipleWallets: boolean;
    maxWalletsPerUser: bigint;
    requireJurisdictionMatch: boolean;
  };

  export type KYCDataStruct = {
    isVerified: boolean;
    verificationHash: string;
    verificationDate: BigNumberish;
    riskScore: BigNumberish;
    isActive: boolean;
    expiresAt: BigNumberish;
    linkedWallet: AddressLike;
    jurisdiction: string;
    tenantId: string;
  };

  export type KYCDataStructOutput = [
    isVerified: boolean,
    verificationHash: string,
    verificationDate: bigint,
    riskScore: bigint,
    isActive: boolean,
    expiresAt: bigint,
    linkedWallet: string,
    jurisdiction: string,
    tenantId: string
  ] & {
    isVerified: boolean;
    verificationHash: string;
    verificationDate: bigint;
    riskScore: bigint;
    isActive: boolean;
    expiresAt: bigint;
    linkedWallet: string;
    jurisdiction: string;
    tenantId: string;
  };
}

export interface KYCDataStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "authorizedWriters"
      | "extendKYCExpiry"
      | "getJurisdictionConfig"
      | "getKYCConfig"
      | "getKYCData"
      | "getKYCStatus"
      | "getLinkedWallets"
      | "getTenantUsers"
      | "getWalletCount"
      | "isAuthorizedWriter"
      | "isKYCValid"
      | "jurisdictionExpiryDurations"
      | "jurisdictionRiskThresholds"
      | "kycConfig"
      | "kycData"
      | "linkWallet"
      | "linkedWallets"
      | "owner"
      | "setAuthorizedWriter"
      | "storeKYCData"
      | "tenantUsers"
      | "unlinkWallet"
      | "updateJurisdictionConfig"
      | "updateKYCConfig"
      | "updateKYCStatus"
      | "updateRiskScore"
      | "userWalletCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "JurisdictionConfigUpdated"
      | "KYCConfigUpdated"
      | "KYCDataStored"
      | "KYCDataUpdated"
      | "WalletLinked"
      | "WalletUnlinked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extendKYCExpiry",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJurisdictionConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getKYCConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKYCData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKYCStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkedWallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenantUsers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKYCValid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionExpiryDurations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionRiskThresholds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kycConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kycData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWallet",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkedWallets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "storeKYCData",
    values: [AddressLike, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tenantUsers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkWallet",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJurisdictionConfig",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKYCConfig",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKYCStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRiskScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userWalletCount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendKYCExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJurisdictionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKYCConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKYCData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKYCStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkedWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenantUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isKYCValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionExpiryDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionRiskThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kycData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "linkWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkedWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeKYCData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tenantUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJurisdictionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKYCConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKYCStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWalletCount",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JurisdictionConfigUpdatedEvent {
  export type InputTuple = [
    jurisdiction: string,
    field: string,
    value: BigNumberish
  ];
  export type OutputTuple = [
    jurisdiction: string,
    field: string,
    value: bigint
  ];
  export interface OutputObject {
    jurisdiction: string;
    field: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCConfigUpdatedEvent {
  export type InputTuple = [
    field: string,
    oldValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [field: string, oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    field: string;
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCDataStoredEvent {
  export type InputTuple = [
    user: AddressLike,
    jurisdiction: string,
    tenantId: string,
    riskScore: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    jurisdiction: string,
    tenantId: string,
    riskScore: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    user: string;
    jurisdiction: string;
    tenantId: string;
    riskScore: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCDataUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    field: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, field: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    field: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletLinkedEvent {
  export type InputTuple = [
    user: AddressLike,
    wallet: AddressLike,
    walletCount: BigNumberish
  ];
  export type OutputTuple = [user: string, wallet: string, walletCount: bigint];
  export interface OutputObject {
    user: string;
    wallet: string;
    walletCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletUnlinkedEvent {
  export type InputTuple = [
    user: AddressLike,
    wallet: AddressLike,
    walletCount: BigNumberish
  ];
  export type OutputTuple = [user: string, wallet: string, walletCount: bigint];
  export interface OutputObject {
    user: string;
    wallet: string;
    walletCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KYCDataStorage extends BaseContract {
  connect(runner?: ContractRunner | null): KYCDataStorage;
  waitForDeployment(): Promise<this>;

  interface: KYCDataStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  extendKYCExpiry: TypedContractMethod<
    [user: AddressLike, additionalTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getJurisdictionConfig: TypedContractMethod<
    [jurisdiction: string],
    [[bigint, bigint] & { expiryDuration: bigint; riskThreshold: bigint }],
    "view"
  >;

  getKYCConfig: TypedContractMethod<
    [],
    [KYCDataStorage.KYCConfigStructOutput],
    "view"
  >;

  getKYCData: TypedContractMethod<
    [user: AddressLike],
    [KYCDataStorage.KYCDataStructOutput],
    "view"
  >;

  getKYCStatus: TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, boolean, boolean] & {
        isVerified: boolean;
        isActive: boolean;
        isExpired: boolean;
      }
    ],
    "view"
  >;

  getLinkedWallets: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  getTenantUsers: TypedContractMethod<[tenantId: string], [string[]], "view">;

  getWalletCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isKYCValid: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  jurisdictionExpiryDurations: TypedContractMethod<
    [arg0: string],
    [bigint],
    "view"
  >;

  jurisdictionRiskThresholds: TypedContractMethod<
    [arg0: string],
    [bigint],
    "view"
  >;

  kycConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, bigint, boolean] & {
        defaultExpiryDuration: bigint;
        maxRiskScore: bigint;
        allowMultipleWallets: boolean;
        maxWalletsPerUser: bigint;
        requireJurisdictionMatch: boolean;
      }
    ],
    "view"
  >;

  kycData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        boolean,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string,
        string
      ] & {
        isVerified: boolean;
        verificationHash: string;
        verificationDate: bigint;
        riskScore: bigint;
        isActive: boolean;
        expiresAt: bigint;
        linkedWallet: string;
        jurisdiction: string;
        tenantId: string;
      }
    ],
    "view"
  >;

  linkWallet: TypedContractMethod<
    [user: AddressLike, wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  linkedWallets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  storeKYCData: TypedContractMethod<
    [
      user: AddressLike,
      verificationHash: string,
      riskScore: BigNumberish,
      jurisdiction: string,
      tenantId: string
    ],
    [void],
    "nonpayable"
  >;

  tenantUsers: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [string],
    "view"
  >;

  unlinkWallet: TypedContractMethod<
    [user: AddressLike, wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateJurisdictionConfig: TypedContractMethod<
    [
      jurisdiction: string,
      expiryDuration: BigNumberish,
      riskThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateKYCConfig: TypedContractMethod<
    [
      _defaultExpiryDuration: BigNumberish,
      _maxRiskScore: BigNumberish,
      _allowMultipleWallets: boolean,
      _maxWalletsPerUser: BigNumberish,
      _requireJurisdictionMatch: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateKYCStatus: TypedContractMethod<
    [user: AddressLike, isActive: boolean],
    [void],
    "nonpayable"
  >;

  updateRiskScore: TypedContractMethod<
    [user: AddressLike, newRiskScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  userWalletCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "extendKYCExpiry"
  ): TypedContractMethod<
    [user: AddressLike, additionalTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getJurisdictionConfig"
  ): TypedContractMethod<
    [jurisdiction: string],
    [[bigint, bigint] & { expiryDuration: bigint; riskThreshold: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKYCConfig"
  ): TypedContractMethod<[], [KYCDataStorage.KYCConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getKYCData"
  ): TypedContractMethod<
    [user: AddressLike],
    [KYCDataStorage.KYCDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKYCStatus"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, boolean, boolean] & {
        isVerified: boolean;
        isActive: boolean;
        isExpired: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLinkedWallets"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTenantUsers"
  ): TypedContractMethod<[tenantId: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWalletCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKYCValid"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "jurisdictionExpiryDurations"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "jurisdictionRiskThresholds"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "kycConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, bigint, boolean] & {
        defaultExpiryDuration: bigint;
        maxRiskScore: bigint;
        allowMultipleWallets: boolean;
        maxWalletsPerUser: bigint;
        requireJurisdictionMatch: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "kycData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        boolean,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string,
        string
      ] & {
        isVerified: boolean;
        verificationHash: string;
        verificationDate: bigint;
        riskScore: bigint;
        isActive: boolean;
        expiresAt: bigint;
        linkedWallet: string;
        jurisdiction: string;
        tenantId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "linkWallet"
  ): TypedContractMethod<
    [user: AddressLike, wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "linkedWallets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storeKYCData"
  ): TypedContractMethod<
    [
      user: AddressLike,
      verificationHash: string,
      riskScore: BigNumberish,
      jurisdiction: string,
      tenantId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tenantUsers"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unlinkWallet"
  ): TypedContractMethod<
    [user: AddressLike, wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateJurisdictionConfig"
  ): TypedContractMethod<
    [
      jurisdiction: string,
      expiryDuration: BigNumberish,
      riskThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKYCConfig"
  ): TypedContractMethod<
    [
      _defaultExpiryDuration: BigNumberish,
      _maxRiskScore: BigNumberish,
      _allowMultipleWallets: boolean,
      _maxWalletsPerUser: BigNumberish,
      _requireJurisdictionMatch: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKYCStatus"
  ): TypedContractMethod<
    [user: AddressLike, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRiskScore"
  ): TypedContractMethod<
    [user: AddressLike, newRiskScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userWalletCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JurisdictionConfigUpdated"
  ): TypedContractEvent<
    JurisdictionConfigUpdatedEvent.InputTuple,
    JurisdictionConfigUpdatedEvent.OutputTuple,
    JurisdictionConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "KYCConfigUpdated"
  ): TypedContractEvent<
    KYCConfigUpdatedEvent.InputTuple,
    KYCConfigUpdatedEvent.OutputTuple,
    KYCConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "KYCDataStored"
  ): TypedContractEvent<
    KYCDataStoredEvent.InputTuple,
    KYCDataStoredEvent.OutputTuple,
    KYCDataStoredEvent.OutputObject
  >;
  getEvent(
    key: "KYCDataUpdated"
  ): TypedContractEvent<
    KYCDataUpdatedEvent.InputTuple,
    KYCDataUpdatedEvent.OutputTuple,
    KYCDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WalletLinked"
  ): TypedContractEvent<
    WalletLinkedEvent.InputTuple,
    WalletLinkedEvent.OutputTuple,
    WalletLinkedEvent.OutputObject
  >;
  getEvent(
    key: "WalletUnlinked"
  ): TypedContractEvent<
    WalletUnlinkedEvent.InputTuple,
    WalletUnlinkedEvent.OutputTuple,
    WalletUnlinkedEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "JurisdictionConfigUpdated(string,string,uint256)": TypedContractEvent<
      JurisdictionConfigUpdatedEvent.InputTuple,
      JurisdictionConfigUpdatedEvent.OutputTuple,
      JurisdictionConfigUpdatedEvent.OutputObject
    >;
    JurisdictionConfigUpdated: TypedContractEvent<
      JurisdictionConfigUpdatedEvent.InputTuple,
      JurisdictionConfigUpdatedEvent.OutputTuple,
      JurisdictionConfigUpdatedEvent.OutputObject
    >;

    "KYCConfigUpdated(string,uint256,uint256)": TypedContractEvent<
      KYCConfigUpdatedEvent.InputTuple,
      KYCConfigUpdatedEvent.OutputTuple,
      KYCConfigUpdatedEvent.OutputObject
    >;
    KYCConfigUpdated: TypedContractEvent<
      KYCConfigUpdatedEvent.InputTuple,
      KYCConfigUpdatedEvent.OutputTuple,
      KYCConfigUpdatedEvent.OutputObject
    >;

    "KYCDataStored(address,string,string,uint256,uint256)": TypedContractEvent<
      KYCDataStoredEvent.InputTuple,
      KYCDataStoredEvent.OutputTuple,
      KYCDataStoredEvent.OutputObject
    >;
    KYCDataStored: TypedContractEvent<
      KYCDataStoredEvent.InputTuple,
      KYCDataStoredEvent.OutputTuple,
      KYCDataStoredEvent.OutputObject
    >;

    "KYCDataUpdated(address,string,uint256)": TypedContractEvent<
      KYCDataUpdatedEvent.InputTuple,
      KYCDataUpdatedEvent.OutputTuple,
      KYCDataUpdatedEvent.OutputObject
    >;
    KYCDataUpdated: TypedContractEvent<
      KYCDataUpdatedEvent.InputTuple,
      KYCDataUpdatedEvent.OutputTuple,
      KYCDataUpdatedEvent.OutputObject
    >;

    "WalletLinked(address,address,uint256)": TypedContractEvent<
      WalletLinkedEvent.InputTuple,
      WalletLinkedEvent.OutputTuple,
      WalletLinkedEvent.OutputObject
    >;
    WalletLinked: TypedContractEvent<
      WalletLinkedEvent.InputTuple,
      WalletLinkedEvent.OutputTuple,
      WalletLinkedEvent.OutputObject
    >;

    "WalletUnlinked(address,address,uint256)": TypedContractEvent<
      WalletUnlinkedEvent.InputTuple,
      WalletUnlinkedEvent.OutputTuple,
      WalletUnlinkedEvent.OutputObject
    >;
    WalletUnlinked: TypedContractEvent<
      WalletUnlinkedEvent.InputTuple,
      WalletUnlinkedEvent.OutputTuple,
      WalletUnlinkedEvent.OutputObject
    >;
  };
}
