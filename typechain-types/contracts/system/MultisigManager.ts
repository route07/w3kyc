/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MultisigManager {
  export type MultisigConfigStruct = {
    isEnabled: boolean;
    requiredSignatures: BigNumberish;
    timelockDuration: BigNumberish;
    isActive: boolean;
  };

  export type MultisigConfigStructOutput = [
    isEnabled: boolean,
    requiredSignatures: bigint,
    timelockDuration: bigint,
    isActive: boolean
  ] & {
    isEnabled: boolean;
    requiredSignatures: bigint;
    timelockDuration: bigint;
    isActive: boolean;
  };
}

export interface MultisigManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "authorizedSigners"
      | "authorizedWriters"
      | "canExecuteOperation"
      | "cancelOperation"
      | "disableMultisig"
      | "enableMultisig"
      | "executeOperation"
      | "getAuthorizedSignerCount"
      | "getMultisigConfig"
      | "getOperationDetails"
      | "getOperationSigners"
      | "getPendingOperation"
      | "getSignatureStatus"
      | "hasSignedOperation"
      | "isAuthorizedSigner"
      | "isAuthorizedWriter"
      | "multisigConfigs"
      | "operationCounter"
      | "operationIds"
      | "owner"
      | "pendingOperations"
      | "proposeOperation"
      | "requiresMultisig"
      | "setAuthorizedSigner"
      | "setAuthorizedWriter"
      | "setMultisigConfig"
      | "signOperation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedSignerUpdated"
      | "AuthorizedWriterUpdated"
      | "MultisigConfigUpdated"
      | "OperationCancelled"
      | "OperationExecuted"
      | "OperationProposed"
      | "OperationSigned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizedSigners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteOperation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOperation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableMultisig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMultisig",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSignerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationSigners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingOperation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignatureStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSignedOperation",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multisigConfigs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operationCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operationIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOperations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeOperation",
    values: [string, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requiresMultisig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedSigner",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultisigConfig",
    values: [string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signOperation",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSignerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignatureStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSignedOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multisigConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiresMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultisigConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signOperation",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedSignerUpdatedEvent {
  export type InputTuple = [signer: AddressLike, authorized: boolean];
  export type OutputTuple = [signer: string, authorized: boolean];
  export interface OutputObject {
    signer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultisigConfigUpdatedEvent {
  export type InputTuple = [
    functionId: BytesLike,
    isEnabled: boolean,
    requiredSignatures: BigNumberish,
    timelockDuration: BigNumberish
  ];
  export type OutputTuple = [
    functionId: string,
    isEnabled: boolean,
    requiredSignatures: bigint,
    timelockDuration: bigint
  ];
  export interface OutputObject {
    functionId: string;
    isEnabled: boolean;
    requiredSignatures: bigint;
    timelockDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationCancelledEvent {
  export type InputTuple = [
    operationId: BigNumberish,
    cancelledBy: AddressLike
  ];
  export type OutputTuple = [operationId: bigint, cancelledBy: string];
  export interface OutputObject {
    operationId: bigint;
    cancelledBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationExecutedEvent {
  export type InputTuple = [
    operationId: BigNumberish,
    functionId: BytesLike,
    target: AddressLike,
    success: boolean
  ];
  export type OutputTuple = [
    operationId: bigint,
    functionId: string,
    target: string,
    success: boolean
  ];
  export interface OutputObject {
    operationId: bigint;
    functionId: string;
    target: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationProposedEvent {
  export type InputTuple = [
    operationId: BigNumberish,
    functionId: BytesLike,
    target: AddressLike,
    proposer: AddressLike,
    requiredSignatures: BigNumberish,
    timelockExpiry: BigNumberish
  ];
  export type OutputTuple = [
    operationId: bigint,
    functionId: string,
    target: string,
    proposer: string,
    requiredSignatures: bigint,
    timelockExpiry: bigint
  ];
  export interface OutputObject {
    operationId: bigint;
    functionId: string;
    target: string;
    proposer: string;
    requiredSignatures: bigint;
    timelockExpiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationSignedEvent {
  export type InputTuple = [
    operationId: BigNumberish,
    signer: AddressLike,
    signatureCount: BigNumberish
  ];
  export type OutputTuple = [
    operationId: bigint,
    signer: string,
    signatureCount: bigint
  ];
  export interface OutputObject {
    operationId: bigint;
    signer: string;
    signatureCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultisigManager extends BaseContract {
  connect(runner?: ContractRunner | null): MultisigManager;
  waitForDeployment(): Promise<this>;

  interface: MultisigManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  authorizedSigners: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  canExecuteOperation: TypedContractMethod<
    [operationId: BigNumberish],
    [boolean],
    "view"
  >;

  cancelOperation: TypedContractMethod<
    [operationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  disableMultisig: TypedContractMethod<
    [functionName: string],
    [void],
    "nonpayable"
  >;

  enableMultisig: TypedContractMethod<
    [
      functionName: string,
      requiredSignatures: BigNumberish,
      timelockDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executeOperation: TypedContractMethod<
    [operationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAuthorizedSignerCount: TypedContractMethod<[], [bigint], "view">;

  getMultisigConfig: TypedContractMethod<
    [functionName: string],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;

  getOperationDetails: TypedContractMethod<
    [operationId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        target: string;
        data: string;
        timestamp: bigint;
        requiredSignatures: bigint;
        currentSignatures: bigint;
        timelockExpiry: bigint;
        executed: boolean;
        canExecute: boolean;
        timeRemaining: bigint;
      }
    ],
    "view"
  >;

  getOperationSigners: TypedContractMethod<
    [operationId: BigNumberish],
    [string[]],
    "view"
  >;

  getPendingOperation: TypedContractMethod<
    [operationId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        target: string;
        data: string;
        timestamp: bigint;
        requiredSignatures: bigint;
        currentSignatures: bigint;
        timelockExpiry: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getSignatureStatus: TypedContractMethod<
    [operationId: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        currentSignatures: bigint;
        requiredSignatures: bigint;
        isComplete: boolean;
      }
    ],
    "view"
  >;

  hasSignedOperation: TypedContractMethod<
    [operationId: BigNumberish, signer: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedSigner: TypedContractMethod<
    [signer: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  multisigConfigs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isEnabled: boolean;
        requiredSignatures: bigint;
        timelockDuration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  operationCounter: TypedContractMethod<[], [bigint], "view">;

  operationIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOperations: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        target: string;
        data: string;
        timestamp: bigint;
        requiredSignatures: bigint;
        timelockExpiry: bigint;
        signatureCount: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  proposeOperation: TypedContractMethod<
    [functionName: string, target: AddressLike, data: BytesLike],
    [bigint],
    "nonpayable"
  >;

  requiresMultisig: TypedContractMethod<
    [functionName: string],
    [boolean],
    "view"
  >;

  setAuthorizedSigner: TypedContractMethod<
    [signer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setMultisigConfig: TypedContractMethod<
    [
      functionName: string,
      isEnabled: boolean,
      requiredSignatures: BigNumberish,
      timelockDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  signOperation: TypedContractMethod<
    [operationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedSigners"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canExecuteOperation"
  ): TypedContractMethod<[operationId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelOperation"
  ): TypedContractMethod<[operationId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableMultisig"
  ): TypedContractMethod<[functionName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableMultisig"
  ): TypedContractMethod<
    [
      functionName: string,
      requiredSignatures: BigNumberish,
      timelockDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeOperation"
  ): TypedContractMethod<[operationId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuthorizedSignerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMultisigConfig"
  ): TypedContractMethod<
    [functionName: string],
    [MultisigManager.MultisigConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperationDetails"
  ): TypedContractMethod<
    [operationId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        target: string;
        data: string;
        timestamp: bigint;
        requiredSignatures: bigint;
        currentSignatures: bigint;
        timelockExpiry: bigint;
        executed: boolean;
        canExecute: boolean;
        timeRemaining: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperationSigners"
  ): TypedContractMethod<[operationId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPendingOperation"
  ): TypedContractMethod<
    [operationId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        target: string;
        data: string;
        timestamp: bigint;
        requiredSignatures: bigint;
        currentSignatures: bigint;
        timelockExpiry: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSignatureStatus"
  ): TypedContractMethod<
    [operationId: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        currentSignatures: bigint;
        requiredSignatures: bigint;
        isComplete: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasSignedOperation"
  ): TypedContractMethod<
    [operationId: BigNumberish, signer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedSigner"
  ): TypedContractMethod<[signer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "multisigConfigs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, bigint, bigint, boolean] & {
        isEnabled: boolean;
        requiredSignatures: bigint;
        timelockDuration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "operationCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "operationIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOperations"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        target: string;
        data: string;
        timestamp: bigint;
        requiredSignatures: bigint;
        timelockExpiry: bigint;
        signatureCount: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeOperation"
  ): TypedContractMethod<
    [functionName: string, target: AddressLike, data: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requiresMultisig"
  ): TypedContractMethod<[functionName: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedSigner"
  ): TypedContractMethod<
    [signer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMultisigConfig"
  ): TypedContractMethod<
    [
      functionName: string,
      isEnabled: boolean,
      requiredSignatures: BigNumberish,
      timelockDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signOperation"
  ): TypedContractMethod<[operationId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AuthorizedSignerUpdated"
  ): TypedContractEvent<
    AuthorizedSignerUpdatedEvent.InputTuple,
    AuthorizedSignerUpdatedEvent.OutputTuple,
    AuthorizedSignerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MultisigConfigUpdated"
  ): TypedContractEvent<
    MultisigConfigUpdatedEvent.InputTuple,
    MultisigConfigUpdatedEvent.OutputTuple,
    MultisigConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperationCancelled"
  ): TypedContractEvent<
    OperationCancelledEvent.InputTuple,
    OperationCancelledEvent.OutputTuple,
    OperationCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OperationExecuted"
  ): TypedContractEvent<
    OperationExecutedEvent.InputTuple,
    OperationExecutedEvent.OutputTuple,
    OperationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OperationProposed"
  ): TypedContractEvent<
    OperationProposedEvent.InputTuple,
    OperationProposedEvent.OutputTuple,
    OperationProposedEvent.OutputObject
  >;
  getEvent(
    key: "OperationSigned"
  ): TypedContractEvent<
    OperationSignedEvent.InputTuple,
    OperationSignedEvent.OutputTuple,
    OperationSignedEvent.OutputObject
  >;

  filters: {
    "AuthorizedSignerUpdated(address,bool)": TypedContractEvent<
      AuthorizedSignerUpdatedEvent.InputTuple,
      AuthorizedSignerUpdatedEvent.OutputTuple,
      AuthorizedSignerUpdatedEvent.OutputObject
    >;
    AuthorizedSignerUpdated: TypedContractEvent<
      AuthorizedSignerUpdatedEvent.InputTuple,
      AuthorizedSignerUpdatedEvent.OutputTuple,
      AuthorizedSignerUpdatedEvent.OutputObject
    >;

    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "MultisigConfigUpdated(bytes32,bool,uint256,uint256)": TypedContractEvent<
      MultisigConfigUpdatedEvent.InputTuple,
      MultisigConfigUpdatedEvent.OutputTuple,
      MultisigConfigUpdatedEvent.OutputObject
    >;
    MultisigConfigUpdated: TypedContractEvent<
      MultisigConfigUpdatedEvent.InputTuple,
      MultisigConfigUpdatedEvent.OutputTuple,
      MultisigConfigUpdatedEvent.OutputObject
    >;

    "OperationCancelled(uint256,address)": TypedContractEvent<
      OperationCancelledEvent.InputTuple,
      OperationCancelledEvent.OutputTuple,
      OperationCancelledEvent.OutputObject
    >;
    OperationCancelled: TypedContractEvent<
      OperationCancelledEvent.InputTuple,
      OperationCancelledEvent.OutputTuple,
      OperationCancelledEvent.OutputObject
    >;

    "OperationExecuted(uint256,bytes32,address,bool)": TypedContractEvent<
      OperationExecutedEvent.InputTuple,
      OperationExecutedEvent.OutputTuple,
      OperationExecutedEvent.OutputObject
    >;
    OperationExecuted: TypedContractEvent<
      OperationExecutedEvent.InputTuple,
      OperationExecutedEvent.OutputTuple,
      OperationExecutedEvent.OutputObject
    >;

    "OperationProposed(uint256,bytes32,address,address,uint256,uint256)": TypedContractEvent<
      OperationProposedEvent.InputTuple,
      OperationProposedEvent.OutputTuple,
      OperationProposedEvent.OutputObject
    >;
    OperationProposed: TypedContractEvent<
      OperationProposedEvent.InputTuple,
      OperationProposedEvent.OutputTuple,
      OperationProposedEvent.OutputObject
    >;

    "OperationSigned(uint256,address,uint256)": TypedContractEvent<
      OperationSignedEvent.InputTuple,
      OperationSignedEvent.OutputTuple,
      OperationSignedEvent.OutputObject
    >;
    OperationSigned: TypedContractEvent<
      OperationSignedEvent.InputTuple,
      OperationSignedEvent.OutputTuple,
      OperationSignedEvent.OutputObject
    >;
  };
}
