/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AuthorizationManager {
  export type RolePermissionsStruct = {
    canVerifyKYC: boolean;
    canIssueCredentials: boolean;
    canManageTenants: boolean;
    canManageUsers: boolean;
    canViewAuditLogs: boolean;
    canManageSystem: boolean;
    canAccessAllTenants: boolean;
  };

  export type RolePermissionsStructOutput = [
    canVerifyKYC: boolean,
    canIssueCredentials: boolean,
    canManageTenants: boolean,
    canManageUsers: boolean,
    canViewAuditLogs: boolean,
    canManageSystem: boolean,
    canAccessAllTenants: boolean
  ] & {
    canVerifyKYC: boolean;
    canIssueCredentials: boolean;
    canManageTenants: boolean;
    canManageUsers: boolean;
    canViewAuditLogs: boolean;
    canManageSystem: boolean;
    canAccessAllTenants: boolean;
  };

  export type UserRoleStruct = {
    role: BigNumberish;
    tenantIds: string[];
    assignedAt: BigNumberish;
    assignedBy: AddressLike;
    isActive: boolean;
    expiresAt: BigNumberish;
  };

  export type UserRoleStructOutput = [
    role: bigint,
    tenantIds: string[],
    assignedAt: bigint,
    assignedBy: string,
    isActive: boolean,
    expiresAt: bigint
  ] & {
    role: bigint;
    tenantIds: string[];
    assignedAt: bigint;
    assignedBy: string;
    isActive: boolean;
    expiresAt: bigint;
  };
}

export interface AuthorizationManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRACT_NAME"
      | "VERSION"
      | "assignRole"
      | "auditLogStorage"
      | "authorizedWriters"
      | "getRolePermissions"
      | "getUserRole"
      | "hasTenantAccess"
      | "isAuthorizedWriter"
      | "isSuperAdmin"
      | "owner"
      | "revokeRole"
      | "rolePermissions"
      | "setAuthorizedWriter"
      | "setSuperAdmin"
      | "superAdmins"
      | "updateRolePermissions"
      | "updateUserTenantAccess"
      | "userHasPermission"
      | "userHasRole"
      | "userRoles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "RoleAssigned"
      | "RolePermissionsUpdated"
      | "RoleRevoked"
      | "SuperAdminUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assignRole",
    values: [AddressLike, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auditLogStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolePermissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTenantAccess",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSuperAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rolePermissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuperAdmin",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRolePermissions",
    values: [
      BigNumberish,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserTenantAccess",
    values: [AddressLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasPermission",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRoles",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assignRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auditLogStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasTenantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "superAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRolePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserTenantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userRoles", data: BytesLike): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAssignedEvent {
  export type InputTuple = [
    user: AddressLike,
    role: BigNumberish,
    tenantIds: string[],
    assignedBy: AddressLike,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    role: bigint,
    tenantIds: string[],
    assignedBy: string,
    expiresAt: bigint
  ];
  export interface OutputObject {
    user: string;
    role: bigint;
    tenantIds: string[];
    assignedBy: string;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RolePermissionsUpdatedEvent {
  export type InputTuple = [role: BigNumberish, field: string, value: boolean];
  export type OutputTuple = [role: bigint, field: string, value: boolean];
  export interface OutputObject {
    role: bigint;
    field: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    user: AddressLike,
    role: BigNumberish,
    revokedBy: AddressLike
  ];
  export type OutputTuple = [user: string, role: bigint, revokedBy: string];
  export interface OutputObject {
    user: string;
    role: bigint;
    revokedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperAdminUpdatedEvent {
  export type InputTuple = [admin: AddressLike, isSuperAdmin: boolean];
  export type OutputTuple = [admin: string, isSuperAdmin: boolean];
  export interface OutputObject {
    admin: string;
    isSuperAdmin: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuthorizationManager extends BaseContract {
  connect(runner?: ContractRunner | null): AuthorizationManager;
  waitForDeployment(): Promise<this>;

  interface: AuthorizationManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  assignRole: TypedContractMethod<
    [
      user: AddressLike,
      role: BigNumberish,
      tenantIds: string[],
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  auditLogStorage: TypedContractMethod<[], [string], "view">;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getRolePermissions: TypedContractMethod<
    [role: BigNumberish],
    [AuthorizationManager.RolePermissionsStructOutput],
    "view"
  >;

  getUserRole: TypedContractMethod<
    [user: AddressLike],
    [AuthorizationManager.UserRoleStructOutput],
    "view"
  >;

  hasTenantAccess: TypedContractMethod<
    [user: AddressLike, tenantId: string],
    [boolean],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isSuperAdmin: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  revokeRole: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  rolePermissions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        canVerifyKYC: boolean;
        canIssueCredentials: boolean;
        canManageTenants: boolean;
        canManageUsers: boolean;
        canViewAuditLogs: boolean;
        canManageSystem: boolean;
        canAccessAllTenants: boolean;
      }
    ],
    "view"
  >;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setSuperAdmin: TypedContractMethod<
    [admin: AddressLike, isSuperAdminStatus: boolean],
    [void],
    "nonpayable"
  >;

  superAdmins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  updateRolePermissions: TypedContractMethod<
    [
      role: BigNumberish,
      canVerifyKYC: boolean,
      canIssueCredentials: boolean,
      canManageTenants: boolean,
      canManageUsers: boolean,
      canViewAuditLogs: boolean,
      canManageSystem: boolean,
      canAccessAllTenants: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateUserTenantAccess: TypedContractMethod<
    [user: AddressLike, tenantIds: string[]],
    [void],
    "nonpayable"
  >;

  userHasPermission: TypedContractMethod<
    [user: AddressLike, permission: string],
    [boolean],
    "view"
  >;

  userHasRole: TypedContractMethod<
    [user: AddressLike, requiredRole: BigNumberish],
    [boolean],
    "view"
  >;

  userRoles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, boolean, bigint] & {
        role: bigint;
        assignedAt: bigint;
        assignedBy: string;
        isActive: boolean;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assignRole"
  ): TypedContractMethod<
    [
      user: AddressLike,
      role: BigNumberish,
      tenantIds: string[],
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "auditLogStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRolePermissions"
  ): TypedContractMethod<
    [role: BigNumberish],
    [AuthorizationManager.RolePermissionsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRole"
  ): TypedContractMethod<
    [user: AddressLike],
    [AuthorizationManager.UserRoleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasTenantAccess"
  ): TypedContractMethod<
    [user: AddressLike, tenantId: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSuperAdmin"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rolePermissions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        canVerifyKYC: boolean;
        canIssueCredentials: boolean;
        canManageTenants: boolean;
        canManageUsers: boolean;
        canViewAuditLogs: boolean;
        canManageSystem: boolean;
        canAccessAllTenants: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSuperAdmin"
  ): TypedContractMethod<
    [admin: AddressLike, isSuperAdminStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "superAdmins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateRolePermissions"
  ): TypedContractMethod<
    [
      role: BigNumberish,
      canVerifyKYC: boolean,
      canIssueCredentials: boolean,
      canManageTenants: boolean,
      canManageUsers: boolean,
      canViewAuditLogs: boolean,
      canManageSystem: boolean,
      canAccessAllTenants: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUserTenantAccess"
  ): TypedContractMethod<
    [user: AddressLike, tenantIds: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userHasPermission"
  ): TypedContractMethod<
    [user: AddressLike, permission: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userHasRole"
  ): TypedContractMethod<
    [user: AddressLike, requiredRole: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userRoles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, boolean, bigint] & {
        role: bigint;
        assignedAt: bigint;
        assignedBy: string;
        isActive: boolean;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAssigned"
  ): TypedContractEvent<
    RoleAssignedEvent.InputTuple,
    RoleAssignedEvent.OutputTuple,
    RoleAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RolePermissionsUpdated"
  ): TypedContractEvent<
    RolePermissionsUpdatedEvent.InputTuple,
    RolePermissionsUpdatedEvent.OutputTuple,
    RolePermissionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SuperAdminUpdated"
  ): TypedContractEvent<
    SuperAdminUpdatedEvent.InputTuple,
    SuperAdminUpdatedEvent.OutputTuple,
    SuperAdminUpdatedEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "RoleAssigned(address,uint8,string[],address,uint256)": TypedContractEvent<
      RoleAssignedEvent.InputTuple,
      RoleAssignedEvent.OutputTuple,
      RoleAssignedEvent.OutputObject
    >;
    RoleAssigned: TypedContractEvent<
      RoleAssignedEvent.InputTuple,
      RoleAssignedEvent.OutputTuple,
      RoleAssignedEvent.OutputObject
    >;

    "RolePermissionsUpdated(uint8,string,bool)": TypedContractEvent<
      RolePermissionsUpdatedEvent.InputTuple,
      RolePermissionsUpdatedEvent.OutputTuple,
      RolePermissionsUpdatedEvent.OutputObject
    >;
    RolePermissionsUpdated: TypedContractEvent<
      RolePermissionsUpdatedEvent.InputTuple,
      RolePermissionsUpdatedEvent.OutputTuple,
      RolePermissionsUpdatedEvent.OutputObject
    >;

    "RoleRevoked(address,uint8,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SuperAdminUpdated(address,bool)": TypedContractEvent<
      SuperAdminUpdatedEvent.InputTuple,
      SuperAdminUpdatedEvent.OutputTuple,
      SuperAdminUpdatedEvent.OutputObject
    >;
    SuperAdminUpdated: TypedContractEvent<
      SuperAdminUpdatedEvent.InputTuple,
      SuperAdminUpdatedEvent.OutputTuple,
      SuperAdminUpdatedEvent.OutputObject
    >;
  };
}
