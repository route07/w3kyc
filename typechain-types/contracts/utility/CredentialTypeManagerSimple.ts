/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CredentialTypeManagerSimple {
  export type CredentialTypeStruct = {
    credentialTypeId: string;
    name: string;
    description: string;
    category: BigNumberish;
    status: BigNumberish;
    defaultValidityPeriod: BigNumberish;
    requiresBiometric: boolean;
    requiresDocumentProof: boolean;
    creationTimestamp: BigNumberish;
    createdBy: AddressLike;
    version: string;
  };

  export type CredentialTypeStructOutput = [
    credentialTypeId: string,
    name: string,
    description: string,
    category: bigint,
    status: bigint,
    defaultValidityPeriod: bigint,
    requiresBiometric: boolean,
    requiresDocumentProof: boolean,
    creationTimestamp: bigint,
    createdBy: string,
    version: string
  ] & {
    credentialTypeId: string;
    name: string;
    description: string;
    category: bigint;
    status: bigint;
    defaultValidityPeriod: bigint;
    requiresBiometric: boolean;
    requiresDocumentProof: boolean;
    creationTimestamp: bigint;
    createdBy: string;
    version: string;
  };
}

export interface CredentialTypeManagerSimpleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allCategories"
      | "allCredentialTypeIds"
      | "authorizedWriters"
      | "createCredentialType"
      | "credentialTypes"
      | "credentialTypesByCategory"
      | "getAllCategories"
      | "getAllCredentialTypeIds"
      | "getCredentialType"
      | "getCredentialTypeStatistics"
      | "getCredentialTypesByCategory"
      | "isAuthorizedWriter"
      | "isCredentialTypeActive"
      | "owner"
      | "setAuthorizedWriter"
      | "updateCredentialTypeStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "CredentialTypeCreated"
      | "CredentialTypeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allCategories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allCredentialTypeIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCredentialType",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "credentialTypes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "credentialTypesByCategory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCredentialTypeIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCredentialType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredentialTypeStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCredentialTypesByCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCredentialTypeActive",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCredentialTypeStatus",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allCredentialTypeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCredentialType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credentialTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credentialTypesByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCredentialTypeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredentialType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredentialTypeStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredentialTypesByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCredentialTypeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCredentialTypeStatus",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialTypeCreatedEvent {
  export type InputTuple = [
    credentialTypeId: string,
    name: string,
    category: BigNumberish
  ];
  export type OutputTuple = [
    credentialTypeId: string,
    name: string,
    category: bigint
  ];
  export interface OutputObject {
    credentialTypeId: string;
    name: string;
    category: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialTypeUpdatedEvent {
  export type InputTuple = [credentialTypeId: string, status: BigNumberish];
  export type OutputTuple = [credentialTypeId: string, status: bigint];
  export interface OutputObject {
    credentialTypeId: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CredentialTypeManagerSimple extends BaseContract {
  connect(runner?: ContractRunner | null): CredentialTypeManagerSimple;
  waitForDeployment(): Promise<this>;

  interface: CredentialTypeManagerSimpleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allCategories: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  allCredentialTypeIds: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createCredentialType: TypedContractMethod<
    [
      credentialTypeId: string,
      name: string,
      description: string,
      category: BigNumberish,
      defaultValidityPeriod: BigNumberish,
      requiresBiometric: boolean,
      requiresDocumentProof: boolean,
      version: string
    ],
    [void],
    "nonpayable"
  >;

  credentialTypes: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        string
      ] & {
        credentialTypeId: string;
        name: string;
        description: string;
        category: bigint;
        status: bigint;
        defaultValidityPeriod: bigint;
        requiresBiometric: boolean;
        requiresDocumentProof: boolean;
        creationTimestamp: bigint;
        createdBy: string;
        version: string;
      }
    ],
    "view"
  >;

  credentialTypesByCategory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  getAllCategories: TypedContractMethod<[], [bigint[]], "view">;

  getAllCredentialTypeIds: TypedContractMethod<[], [string[]], "view">;

  getCredentialType: TypedContractMethod<
    [credentialTypeId: string],
    [CredentialTypeManagerSimple.CredentialTypeStructOutput],
    "view"
  >;

  getCredentialTypeStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalTypes: bigint;
        activeTypes: bigint;
        categoriesCount: bigint;
      }
    ],
    "view"
  >;

  getCredentialTypesByCategory: TypedContractMethod<
    [category: BigNumberish],
    [string[]],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isCredentialTypeActive: TypedContractMethod<
    [credentialTypeId: string],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  updateCredentialTypeStatus: TypedContractMethod<
    [credentialTypeId: string, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allCategories"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "allCredentialTypeIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createCredentialType"
  ): TypedContractMethod<
    [
      credentialTypeId: string,
      name: string,
      description: string,
      category: BigNumberish,
      defaultValidityPeriod: BigNumberish,
      requiresBiometric: boolean,
      requiresDocumentProof: boolean,
      version: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credentialTypes"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        string
      ] & {
        credentialTypeId: string;
        name: string;
        description: string;
        category: bigint;
        status: bigint;
        defaultValidityPeriod: bigint;
        requiresBiometric: boolean;
        requiresDocumentProof: boolean;
        creationTimestamp: bigint;
        createdBy: string;
        version: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "credentialTypesByCategory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllCategories"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllCredentialTypeIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCredentialType"
  ): TypedContractMethod<
    [credentialTypeId: string],
    [CredentialTypeManagerSimple.CredentialTypeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCredentialTypeStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalTypes: bigint;
        activeTypes: bigint;
        categoriesCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCredentialTypesByCategory"
  ): TypedContractMethod<[category: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCredentialTypeActive"
  ): TypedContractMethod<[credentialTypeId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCredentialTypeStatus"
  ): TypedContractMethod<
    [credentialTypeId: string, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialTypeCreated"
  ): TypedContractEvent<
    CredentialTypeCreatedEvent.InputTuple,
    CredentialTypeCreatedEvent.OutputTuple,
    CredentialTypeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialTypeUpdated"
  ): TypedContractEvent<
    CredentialTypeUpdatedEvent.InputTuple,
    CredentialTypeUpdatedEvent.OutputTuple,
    CredentialTypeUpdatedEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "CredentialTypeCreated(string,string,uint8)": TypedContractEvent<
      CredentialTypeCreatedEvent.InputTuple,
      CredentialTypeCreatedEvent.OutputTuple,
      CredentialTypeCreatedEvent.OutputObject
    >;
    CredentialTypeCreated: TypedContractEvent<
      CredentialTypeCreatedEvent.InputTuple,
      CredentialTypeCreatedEvent.OutputTuple,
      CredentialTypeCreatedEvent.OutputObject
    >;

    "CredentialTypeUpdated(string,uint8)": TypedContractEvent<
      CredentialTypeUpdatedEvent.InputTuple,
      CredentialTypeUpdatedEvent.OutputTuple,
      CredentialTypeUpdatedEvent.OutputObject
    >;
    CredentialTypeUpdated: TypedContractEvent<
      CredentialTypeUpdatedEvent.InputTuple,
      CredentialTypeUpdatedEvent.OutputTuple,
      CredentialTypeUpdatedEvent.OutputObject
    >;
  };
}
