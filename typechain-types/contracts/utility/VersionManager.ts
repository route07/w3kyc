/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace VersionManager {
  export type ContractVersionStruct = {
    version: string;
    contractAddress: AddressLike;
    deployedAt: BigNumberish;
    isActive: boolean;
    description: string;
    dependencies: string[];
  };

  export type ContractVersionStructOutput = [
    version: string,
    contractAddress: string,
    deployedAt: bigint,
    isActive: boolean,
    description: string,
    dependencies: string[]
  ] & {
    version: string;
    contractAddress: string;
    deployedAt: bigint;
    isActive: boolean;
    description: string;
    dependencies: string[];
  };

  export type MigrationPlanStruct = {
    fromVersion: string;
    toVersion: string;
    migrationContract: AddressLike;
    plannedAt: BigNumberish;
    executedAt: BigNumberish;
    isExecuted: boolean;
    description: string;
  };

  export type MigrationPlanStructOutput = [
    fromVersion: string,
    toVersion: string,
    migrationContract: string,
    plannedAt: bigint,
    executedAt: bigint,
    isExecuted: boolean,
    description: string
  ] & {
    fromVersion: string;
    toVersion: string;
    migrationContract: string;
    plannedAt: bigint;
    executedAt: bigint;
    isExecuted: boolean;
    description: string;
  };
}

export interface VersionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateContractVersion"
      | "authorizedWriters"
      | "contractNames"
      | "contractVersions"
      | "createMigrationPlan"
      | "executeMigration"
      | "getActiveVersion"
      | "getAllContractNames"
      | "getAllMigrationIds"
      | "getContractVersion"
      | "getMigrationPlan"
      | "isAuthorizedWriter"
      | "migrationIds"
      | "migrationPlans"
      | "owner"
      | "registerContractVersion"
      | "setAuthorizedWriter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "ContractVersionActivated"
      | "ContractVersionRegistered"
      | "MigrationExecuted"
      | "MigrationPlanCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateContractVersion",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createMigrationPlan",
    values: [string, string, string, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMigration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVersion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContractNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMigrationIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVersion",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrationPlan",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationPlans",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerContractVersion",
    values: [string, string, AddressLike, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMigrationPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContractNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMigrationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrationPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractVersionActivatedEvent {
  export type InputTuple = [contractName: string, version: string];
  export type OutputTuple = [contractName: string, version: string];
  export interface OutputObject {
    contractName: string;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractVersionRegisteredEvent {
  export type InputTuple = [
    contractName: string,
    version: string,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    contractName: string,
    version: string,
    contractAddress: string
  ];
  export interface OutputObject {
    contractName: string;
    version: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrationExecutedEvent {
  export type InputTuple = [
    migrationId: string,
    migrationContract: AddressLike
  ];
  export type OutputTuple = [migrationId: string, migrationContract: string];
  export interface OutputObject {
    migrationId: string;
    migrationContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrationPlanCreatedEvent {
  export type InputTuple = [
    migrationId: string,
    fromVersion: string,
    toVersion: string
  ];
  export type OutputTuple = [
    migrationId: string,
    fromVersion: string,
    toVersion: string
  ];
  export interface OutputObject {
    migrationId: string;
    fromVersion: string;
    toVersion: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VersionManager extends BaseContract {
  connect(runner?: ContractRunner | null): VersionManager;
  waitForDeployment(): Promise<this>;

  interface: VersionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateContractVersion: TypedContractMethod<
    [contractName: string, version: string],
    [void],
    "nonpayable"
  >;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  contractNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  contractVersions: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean, string] & {
        version: string;
        contractAddress: string;
        deployedAt: bigint;
        isActive: boolean;
        description: string;
      }
    ],
    "view"
  >;

  createMigrationPlan: TypedContractMethod<
    [
      migrationId: string,
      fromVersion: string,
      toVersion: string,
      migrationContract: AddressLike,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  executeMigration: TypedContractMethod<
    [migrationId: string],
    [void],
    "nonpayable"
  >;

  getActiveVersion: TypedContractMethod<
    [contractName: string],
    [[string, string] & { version: string; contractAddress: string }],
    "view"
  >;

  getAllContractNames: TypedContractMethod<[], [string[]], "view">;

  getAllMigrationIds: TypedContractMethod<[], [string[]], "view">;

  getContractVersion: TypedContractMethod<
    [contractName: string, version: string],
    [VersionManager.ContractVersionStructOutput],
    "view"
  >;

  getMigrationPlan: TypedContractMethod<
    [migrationId: string],
    [VersionManager.MigrationPlanStructOutput],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  migrationIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  migrationPlans: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean, string] & {
        fromVersion: string;
        toVersion: string;
        migrationContract: string;
        plannedAt: bigint;
        executedAt: bigint;
        isExecuted: boolean;
        description: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerContractVersion: TypedContractMethod<
    [
      contractName: string,
      version: string,
      contractAddress: AddressLike,
      description: string,
      dependencies: string[]
    ],
    [void],
    "nonpayable"
  >;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateContractVersion"
  ): TypedContractMethod<
    [contractName: string, version: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contractVersions"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean, string] & {
        version: string;
        contractAddress: string;
        deployedAt: bigint;
        isActive: boolean;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createMigrationPlan"
  ): TypedContractMethod<
    [
      migrationId: string,
      fromVersion: string,
      toVersion: string,
      migrationContract: AddressLike,
      description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeMigration"
  ): TypedContractMethod<[migrationId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveVersion"
  ): TypedContractMethod<
    [contractName: string],
    [[string, string] & { version: string; contractAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllContractNames"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllMigrationIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractVersion"
  ): TypedContractMethod<
    [contractName: string, version: string],
    [VersionManager.ContractVersionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMigrationPlan"
  ): TypedContractMethod<
    [migrationId: string],
    [VersionManager.MigrationPlanStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrationIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "migrationPlans"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean, string] & {
        fromVersion: string;
        toVersion: string;
        migrationContract: string;
        plannedAt: bigint;
        executedAt: bigint;
        isExecuted: boolean;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerContractVersion"
  ): TypedContractMethod<
    [
      contractName: string,
      version: string,
      contractAddress: AddressLike,
      description: string,
      dependencies: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractVersionActivated"
  ): TypedContractEvent<
    ContractVersionActivatedEvent.InputTuple,
    ContractVersionActivatedEvent.OutputTuple,
    ContractVersionActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractVersionRegistered"
  ): TypedContractEvent<
    ContractVersionRegisteredEvent.InputTuple,
    ContractVersionRegisteredEvent.OutputTuple,
    ContractVersionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MigrationExecuted"
  ): TypedContractEvent<
    MigrationExecutedEvent.InputTuple,
    MigrationExecutedEvent.OutputTuple,
    MigrationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MigrationPlanCreated"
  ): TypedContractEvent<
    MigrationPlanCreatedEvent.InputTuple,
    MigrationPlanCreatedEvent.OutputTuple,
    MigrationPlanCreatedEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "ContractVersionActivated(string,string)": TypedContractEvent<
      ContractVersionActivatedEvent.InputTuple,
      ContractVersionActivatedEvent.OutputTuple,
      ContractVersionActivatedEvent.OutputObject
    >;
    ContractVersionActivated: TypedContractEvent<
      ContractVersionActivatedEvent.InputTuple,
      ContractVersionActivatedEvent.OutputTuple,
      ContractVersionActivatedEvent.OutputObject
    >;

    "ContractVersionRegistered(string,string,address)": TypedContractEvent<
      ContractVersionRegisteredEvent.InputTuple,
      ContractVersionRegisteredEvent.OutputTuple,
      ContractVersionRegisteredEvent.OutputObject
    >;
    ContractVersionRegistered: TypedContractEvent<
      ContractVersionRegisteredEvent.InputTuple,
      ContractVersionRegisteredEvent.OutputTuple,
      ContractVersionRegisteredEvent.OutputObject
    >;

    "MigrationExecuted(string,address)": TypedContractEvent<
      MigrationExecutedEvent.InputTuple,
      MigrationExecutedEvent.OutputTuple,
      MigrationExecutedEvent.OutputObject
    >;
    MigrationExecuted: TypedContractEvent<
      MigrationExecutedEvent.InputTuple,
      MigrationExecutedEvent.OutputTuple,
      MigrationExecutedEvent.OutputObject
    >;

    "MigrationPlanCreated(string,string,string)": TypedContractEvent<
      MigrationPlanCreatedEvent.InputTuple,
      MigrationPlanCreatedEvent.OutputTuple,
      MigrationPlanCreatedEvent.OutputObject
    >;
    MigrationPlanCreated: TypedContractEvent<
      MigrationPlanCreatedEvent.InputTuple,
      MigrationPlanCreatedEvent.OutputTuple,
      MigrationPlanCreatedEvent.OutputObject
    >;
  };
}
