/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace JurisdictionConfig {
  export type CrossJurisdictionRuleStruct = {
    isActive: boolean;
    fromJurisdiction: BigNumberish;
    toJurisdiction: BigNumberish;
    requiresReVerification: boolean;
    validityPeriod: BigNumberish;
    description: string;
  };

  export type CrossJurisdictionRuleStructOutput = [
    isActive: boolean,
    fromJurisdiction: bigint,
    toJurisdiction: bigint,
    requiresReVerification: boolean,
    validityPeriod: bigint,
    description: string
  ] & {
    isActive: boolean;
    fromJurisdiction: bigint;
    toJurisdiction: bigint;
    requiresReVerification: boolean;
    validityPeriod: bigint;
    description: string;
  };

  export type JurisdictionSettingsStruct = {
    isActive: boolean;
    complianceLevel: BigNumberish;
    minAge: BigNumberish;
    maxAge: BigNumberish;
    requiresBiometric: boolean;
    requiresAddressProof: boolean;
    requiresIncomeProof: boolean;
    maxTransactionLimit: BigNumberish;
    dailyLimit: BigNumberish;
    monthlyLimit: BigNumberish;
    kycValidityPeriod: BigNumberish;
    requiredDocuments: string[];
    allowedCountries: string[];
    description: string;
  };

  export type JurisdictionSettingsStructOutput = [
    isActive: boolean,
    complianceLevel: bigint,
    minAge: bigint,
    maxAge: bigint,
    requiresBiometric: boolean,
    requiresAddressProof: boolean,
    requiresIncomeProof: boolean,
    maxTransactionLimit: bigint,
    dailyLimit: bigint,
    monthlyLimit: bigint,
    kycValidityPeriod: bigint,
    requiredDocuments: string[],
    allowedCountries: string[],
    description: string
  ] & {
    isActive: boolean;
    complianceLevel: bigint;
    minAge: bigint;
    maxAge: bigint;
    requiresBiometric: boolean;
    requiresAddressProof: boolean;
    requiresIncomeProof: boolean;
    maxTransactionLimit: bigint;
    dailyLimit: bigint;
    monthlyLimit: bigint;
    kycValidityPeriod: bigint;
    requiredDocuments: string[];
    allowedCountries: string[];
    description: string;
  };
}

export interface JurisdictionConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedWriters"
      | "checkCrossJurisdictionCompliance"
      | "createCrossJurisdictionRule"
      | "crossJurisdictionRuleIds"
      | "crossJurisdictionRules"
      | "getComplianceLevel"
      | "getCrossJurisdictionRule"
      | "getCrossJurisdictionRuleIds"
      | "getJurisdictionSettings"
      | "getSupportedJurisdictions"
      | "isAuthorizedWriter"
      | "isJurisdictionActive"
      | "jurisdictionSettings"
      | "owner"
      | "setAuthorizedWriter"
      | "supportedJurisdictions"
      | "updateCrossJurisdictionRule"
      | "updateJurisdictionSettings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "CrossJurisdictionRuleCreated"
      | "CrossJurisdictionRuleUpdated"
      | "JurisdictionSettingsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCrossJurisdictionCompliance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrossJurisdictionRule",
    values: [string, BigNumberish, BigNumberish, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "crossJurisdictionRuleIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossJurisdictionRules",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrossJurisdictionRule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrossJurisdictionRuleIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJurisdictionSettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedJurisdictions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isJurisdictionActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionSettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedJurisdictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCrossJurisdictionRule",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJurisdictionSettings",
    values: [BigNumberish, JurisdictionConfig.JurisdictionSettingsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCrossJurisdictionCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCrossJurisdictionRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossJurisdictionRuleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossJurisdictionRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrossJurisdictionRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrossJurisdictionRuleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJurisdictionSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedJurisdictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isJurisdictionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedJurisdictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCrossJurisdictionRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJurisdictionSettings",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossJurisdictionRuleCreatedEvent {
  export type InputTuple = [
    ruleId: string,
    fromJurisdiction: BigNumberish,
    toJurisdiction: BigNumberish
  ];
  export type OutputTuple = [
    ruleId: string,
    fromJurisdiction: bigint,
    toJurisdiction: bigint
  ];
  export interface OutputObject {
    ruleId: string;
    fromJurisdiction: bigint;
    toJurisdiction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossJurisdictionRuleUpdatedEvent {
  export type InputTuple = [ruleId: string, isActive: boolean];
  export type OutputTuple = [ruleId: string, isActive: boolean];
  export interface OutputObject {
    ruleId: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JurisdictionSettingsUpdatedEvent {
  export type InputTuple = [
    jurisdiction: BigNumberish,
    complianceLevel: BigNumberish
  ];
  export type OutputTuple = [jurisdiction: bigint, complianceLevel: bigint];
  export interface OutputObject {
    jurisdiction: bigint;
    complianceLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JurisdictionConfig extends BaseContract {
  connect(runner?: ContractRunner | null): JurisdictionConfig;
  waitForDeployment(): Promise<this>;

  interface: JurisdictionConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  checkCrossJurisdictionCompliance: TypedContractMethod<
    [fromJurisdiction: BigNumberish, toJurisdiction: BigNumberish],
    [
      [boolean, bigint] & {
        requiresReVerification: boolean;
        validityPeriod: bigint;
      }
    ],
    "view"
  >;

  createCrossJurisdictionRule: TypedContractMethod<
    [
      ruleId: string,
      fromJurisdiction: BigNumberish,
      toJurisdiction: BigNumberish,
      requiresReVerification: boolean,
      validityPeriod: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  crossJurisdictionRuleIds: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  crossJurisdictionRules: TypedContractMethod<
    [arg0: string],
    [
      [boolean, bigint, bigint, boolean, bigint, string] & {
        isActive: boolean;
        fromJurisdiction: bigint;
        toJurisdiction: bigint;
        requiresReVerification: boolean;
        validityPeriod: bigint;
        description: string;
      }
    ],
    "view"
  >;

  getComplianceLevel: TypedContractMethod<
    [jurisdiction: BigNumberish],
    [bigint],
    "view"
  >;

  getCrossJurisdictionRule: TypedContractMethod<
    [ruleId: string],
    [JurisdictionConfig.CrossJurisdictionRuleStructOutput],
    "view"
  >;

  getCrossJurisdictionRuleIds: TypedContractMethod<[], [string[]], "view">;

  getJurisdictionSettings: TypedContractMethod<
    [jurisdiction: BigNumberish],
    [JurisdictionConfig.JurisdictionSettingsStructOutput],
    "view"
  >;

  getSupportedJurisdictions: TypedContractMethod<[], [bigint[]], "view">;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isJurisdictionActive: TypedContractMethod<
    [jurisdiction: BigNumberish],
    [boolean],
    "view"
  >;

  jurisdictionSettings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        isActive: boolean;
        complianceLevel: bigint;
        minAge: bigint;
        maxAge: bigint;
        requiresBiometric: boolean;
        requiresAddressProof: boolean;
        requiresIncomeProof: boolean;
        maxTransactionLimit: bigint;
        dailyLimit: bigint;
        monthlyLimit: bigint;
        kycValidityPeriod: bigint;
        description: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  supportedJurisdictions: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  updateCrossJurisdictionRule: TypedContractMethod<
    [ruleId: string, isActive: boolean],
    [void],
    "nonpayable"
  >;

  updateJurisdictionSettings: TypedContractMethod<
    [
      jurisdiction: BigNumberish,
      settings: JurisdictionConfig.JurisdictionSettingsStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkCrossJurisdictionCompliance"
  ): TypedContractMethod<
    [fromJurisdiction: BigNumberish, toJurisdiction: BigNumberish],
    [
      [boolean, bigint] & {
        requiresReVerification: boolean;
        validityPeriod: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCrossJurisdictionRule"
  ): TypedContractMethod<
    [
      ruleId: string,
      fromJurisdiction: BigNumberish,
      toJurisdiction: BigNumberish,
      requiresReVerification: boolean,
      validityPeriod: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "crossJurisdictionRuleIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "crossJurisdictionRules"
  ): TypedContractMethod<
    [arg0: string],
    [
      [boolean, bigint, bigint, boolean, bigint, string] & {
        isActive: boolean;
        fromJurisdiction: bigint;
        toJurisdiction: bigint;
        requiresReVerification: boolean;
        validityPeriod: bigint;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceLevel"
  ): TypedContractMethod<[jurisdiction: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCrossJurisdictionRule"
  ): TypedContractMethod<
    [ruleId: string],
    [JurisdictionConfig.CrossJurisdictionRuleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCrossJurisdictionRuleIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getJurisdictionSettings"
  ): TypedContractMethod<
    [jurisdiction: BigNumberish],
    [JurisdictionConfig.JurisdictionSettingsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedJurisdictions"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isJurisdictionActive"
  ): TypedContractMethod<[jurisdiction: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "jurisdictionSettings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        isActive: boolean;
        complianceLevel: bigint;
        minAge: bigint;
        maxAge: bigint;
        requiresBiometric: boolean;
        requiresAddressProof: boolean;
        requiresIncomeProof: boolean;
        maxTransactionLimit: bigint;
        dailyLimit: bigint;
        monthlyLimit: bigint;
        kycValidityPeriod: bigint;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedJurisdictions"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateCrossJurisdictionRule"
  ): TypedContractMethod<
    [ruleId: string, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateJurisdictionSettings"
  ): TypedContractMethod<
    [
      jurisdiction: BigNumberish,
      settings: JurisdictionConfig.JurisdictionSettingsStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CrossJurisdictionRuleCreated"
  ): TypedContractEvent<
    CrossJurisdictionRuleCreatedEvent.InputTuple,
    CrossJurisdictionRuleCreatedEvent.OutputTuple,
    CrossJurisdictionRuleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CrossJurisdictionRuleUpdated"
  ): TypedContractEvent<
    CrossJurisdictionRuleUpdatedEvent.InputTuple,
    CrossJurisdictionRuleUpdatedEvent.OutputTuple,
    CrossJurisdictionRuleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JurisdictionSettingsUpdated"
  ): TypedContractEvent<
    JurisdictionSettingsUpdatedEvent.InputTuple,
    JurisdictionSettingsUpdatedEvent.OutputTuple,
    JurisdictionSettingsUpdatedEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "CrossJurisdictionRuleCreated(string,uint8,uint8)": TypedContractEvent<
      CrossJurisdictionRuleCreatedEvent.InputTuple,
      CrossJurisdictionRuleCreatedEvent.OutputTuple,
      CrossJurisdictionRuleCreatedEvent.OutputObject
    >;
    CrossJurisdictionRuleCreated: TypedContractEvent<
      CrossJurisdictionRuleCreatedEvent.InputTuple,
      CrossJurisdictionRuleCreatedEvent.OutputTuple,
      CrossJurisdictionRuleCreatedEvent.OutputObject
    >;

    "CrossJurisdictionRuleUpdated(string,bool)": TypedContractEvent<
      CrossJurisdictionRuleUpdatedEvent.InputTuple,
      CrossJurisdictionRuleUpdatedEvent.OutputTuple,
      CrossJurisdictionRuleUpdatedEvent.OutputObject
    >;
    CrossJurisdictionRuleUpdated: TypedContractEvent<
      CrossJurisdictionRuleUpdatedEvent.InputTuple,
      CrossJurisdictionRuleUpdatedEvent.OutputTuple,
      CrossJurisdictionRuleUpdatedEvent.OutputObject
    >;

    "JurisdictionSettingsUpdated(uint8,uint8)": TypedContractEvent<
      JurisdictionSettingsUpdatedEvent.InputTuple,
      JurisdictionSettingsUpdatedEvent.OutputTuple,
      JurisdictionSettingsUpdatedEvent.OutputObject
    >;
    JurisdictionSettingsUpdated: TypedContractEvent<
      JurisdictionSettingsUpdatedEvent.InputTuple,
      JurisdictionSettingsUpdatedEvent.OutputTuple,
      JurisdictionSettingsUpdatedEvent.OutputObject
    >;
  };
}
