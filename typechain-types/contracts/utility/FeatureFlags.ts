/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace FeatureFlags {
  export type FeatureConfigStruct = {
    allowOverride: boolean;
    logUsage: boolean;
    trackMetrics: boolean;
    maxUsagePerUser: BigNumberish;
    allowedUsers: string[];
    blockedUsers: string[];
    allowedTenants: string[];
    blockedTenants: string[];
  };

  export type FeatureConfigStructOutput = [
    allowOverride: boolean,
    logUsage: boolean,
    trackMetrics: boolean,
    maxUsagePerUser: bigint,
    allowedUsers: string[],
    blockedUsers: string[],
    allowedTenants: string[],
    blockedTenants: string[]
  ] & {
    allowOverride: boolean;
    logUsage: boolean;
    trackMetrics: boolean;
    maxUsagePerUser: bigint;
    allowedUsers: string[];
    blockedUsers: string[];
    allowedTenants: string[];
    blockedTenants: string[];
  };

  export type FeatureFlagStruct = {
    featureId: string;
    name: string;
    description: string;
    category: BigNumberish;
    status: BigNumberish;
    rolloutPercentage: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    createdBy: AddressLike;
    version: string;
    requiresAuth: boolean;
    dependencies: string[];
    metadata: string;
  };

  export type FeatureFlagStructOutput = [
    featureId: string,
    name: string,
    description: string,
    category: bigint,
    status: bigint,
    rolloutPercentage: bigint,
    startTime: bigint,
    endTime: bigint,
    createdBy: string,
    version: string,
    requiresAuth: boolean,
    dependencies: string[],
    metadata: string
  ] & {
    featureId: string;
    name: string;
    description: string;
    category: bigint;
    status: bigint;
    rolloutPercentage: bigint;
    startTime: bigint;
    endTime: bigint;
    createdBy: string;
    version: string;
    requiresAuth: boolean;
    dependencies: string[];
    metadata: string;
  };
}

export interface FeatureFlagsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allCategories"
      | "allFeatureIds"
      | "authorizedWriters"
      | "createFeatureFlag"
      | "deleteFeatureFlag"
      | "featureConfigs"
      | "featureFlags"
      | "featureUsageCount"
      | "featuresByCategory"
      | "getAllCategories"
      | "getAllFeatureIds"
      | "getFeatureConfig"
      | "getFeatureFlag"
      | "getFeatureUsageStats"
      | "getFeaturesByCategory"
      | "isAuthorizedWriter"
      | "isFeatureEnabled"
      | "owner"
      | "setAuthorizedWriter"
      | "totalFeatureUsage"
      | "trackFeatureUsage"
      | "updateFeatureConfig"
      | "updateFeatureFlag"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedWriterUpdated"
      | "FeatureFlagCreated"
      | "FeatureFlagDeleted"
      | "FeatureFlagUpdated"
      | "FeatureUsageTracked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allCategories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allFeatureIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWriters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFeatureFlag",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string[],
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFeatureFlag",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "featureConfigs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "featureFlags",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "featureUsageCount",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "featuresByCategory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFeatureIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeatureConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeatureFlag",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeatureUsageStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeaturesByCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedWriter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeatureEnabled",
    values: [string, AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedWriter",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeatureUsage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trackFeatureUsage",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeatureConfig",
    values: [string, FeatureFlags.FeatureConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeatureFlag",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allFeatureIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFeatureFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteFeatureFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "featureConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "featureFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "featureUsageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "featuresByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFeatureIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeatureConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeatureFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeatureUsageStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeaturesByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeatureEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeatureUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trackFeatureUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeatureConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeatureFlag",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedWriterUpdatedEvent {
  export type InputTuple = [writer: AddressLike, authorized: boolean];
  export type OutputTuple = [writer: string, authorized: boolean];
  export interface OutputObject {
    writer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeatureFlagCreatedEvent {
  export type InputTuple = [
    featureId: string,
    name: string,
    category: BigNumberish
  ];
  export type OutputTuple = [featureId: string, name: string, category: bigint];
  export interface OutputObject {
    featureId: string;
    name: string;
    category: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeatureFlagDeletedEvent {
  export type InputTuple = [featureId: string];
  export type OutputTuple = [featureId: string];
  export interface OutputObject {
    featureId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeatureFlagUpdatedEvent {
  export type InputTuple = [
    featureId: string,
    status: BigNumberish,
    rolloutPercentage: BigNumberish
  ];
  export type OutputTuple = [
    featureId: string,
    status: bigint,
    rolloutPercentage: bigint
  ];
  export interface OutputObject {
    featureId: string;
    status: bigint;
    rolloutPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeatureUsageTrackedEvent {
  export type InputTuple = [
    featureId: string,
    user: AddressLike,
    usageCount: BigNumberish
  ];
  export type OutputTuple = [
    featureId: string,
    user: string,
    usageCount: bigint
  ];
  export interface OutputObject {
    featureId: string;
    user: string;
    usageCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeatureFlags extends BaseContract {
  connect(runner?: ContractRunner | null): FeatureFlags;
  waitForDeployment(): Promise<this>;

  interface: FeatureFlagsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allCategories: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  allFeatureIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  authorizedWriters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createFeatureFlag: TypedContractMethod<
    [
      featureId: string,
      name: string,
      description: string,
      category: BigNumberish,
      status: BigNumberish,
      rolloutPercentage: BigNumberish,
      endTime: BigNumberish,
      requiresAuth: boolean,
      dependencies: string[],
      version: string,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;

  deleteFeatureFlag: TypedContractMethod<
    [featureId: string],
    [void],
    "nonpayable"
  >;

  featureConfigs: TypedContractMethod<
    [arg0: string],
    [
      [boolean, boolean, boolean, bigint] & {
        allowOverride: boolean;
        logUsage: boolean;
        trackMetrics: boolean;
        maxUsagePerUser: bigint;
      }
    ],
    "view"
  >;

  featureFlags: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean,
        string
      ] & {
        featureId: string;
        name: string;
        description: string;
        category: bigint;
        status: bigint;
        rolloutPercentage: bigint;
        startTime: bigint;
        endTime: bigint;
        createdBy: string;
        version: string;
        requiresAuth: boolean;
        metadata: string;
      }
    ],
    "view"
  >;

  featureUsageCount: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [bigint],
    "view"
  >;

  featuresByCategory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  getAllCategories: TypedContractMethod<[], [bigint[]], "view">;

  getAllFeatureIds: TypedContractMethod<[], [string[]], "view">;

  getFeatureConfig: TypedContractMethod<
    [featureId: string],
    [FeatureFlags.FeatureConfigStructOutput],
    "view"
  >;

  getFeatureFlag: TypedContractMethod<
    [featureId: string],
    [FeatureFlags.FeatureFlagStructOutput],
    "view"
  >;

  getFeatureUsageStats: TypedContractMethod<
    [featureId: string],
    [[bigint, bigint] & { totalUsage: bigint; uniqueUsers: bigint }],
    "view"
  >;

  getFeaturesByCategory: TypedContractMethod<
    [category: BigNumberish],
    [string[]],
    "view"
  >;

  isAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike],
    [boolean],
    "view"
  >;

  isFeatureEnabled: TypedContractMethod<
    [featureId: string, user: AddressLike, tenantId: string],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setAuthorizedWriter: TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  totalFeatureUsage: TypedContractMethod<[arg0: string], [bigint], "view">;

  trackFeatureUsage: TypedContractMethod<
    [featureId: string, user: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeatureConfig: TypedContractMethod<
    [featureId: string, config: FeatureFlags.FeatureConfigStruct],
    [void],
    "nonpayable"
  >;

  updateFeatureFlag: TypedContractMethod<
    [featureId: string, status: BigNumberish, rolloutPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allCategories"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "allFeatureIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "authorizedWriters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createFeatureFlag"
  ): TypedContractMethod<
    [
      featureId: string,
      name: string,
      description: string,
      category: BigNumberish,
      status: BigNumberish,
      rolloutPercentage: BigNumberish,
      endTime: BigNumberish,
      requiresAuth: boolean,
      dependencies: string[],
      version: string,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteFeatureFlag"
  ): TypedContractMethod<[featureId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "featureConfigs"
  ): TypedContractMethod<
    [arg0: string],
    [
      [boolean, boolean, boolean, bigint] & {
        allowOverride: boolean;
        logUsage: boolean;
        trackMetrics: boolean;
        maxUsagePerUser: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "featureFlags"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean,
        string
      ] & {
        featureId: string;
        name: string;
        description: string;
        category: bigint;
        status: bigint;
        rolloutPercentage: bigint;
        startTime: bigint;
        endTime: bigint;
        createdBy: string;
        version: string;
        requiresAuth: boolean;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "featureUsageCount"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "featuresByCategory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllCategories"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllFeatureIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFeatureConfig"
  ): TypedContractMethod<
    [featureId: string],
    [FeatureFlags.FeatureConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeatureFlag"
  ): TypedContractMethod<
    [featureId: string],
    [FeatureFlags.FeatureFlagStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeatureUsageStats"
  ): TypedContractMethod<
    [featureId: string],
    [[bigint, bigint] & { totalUsage: bigint; uniqueUsers: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeaturesByCategory"
  ): TypedContractMethod<[category: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedWriter"
  ): TypedContractMethod<[writer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFeatureEnabled"
  ): TypedContractMethod<
    [featureId: string, user: AddressLike, tenantId: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedWriter"
  ): TypedContractMethod<
    [writer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalFeatureUsage"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "trackFeatureUsage"
  ): TypedContractMethod<
    [featureId: string, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFeatureConfig"
  ): TypedContractMethod<
    [featureId: string, config: FeatureFlags.FeatureConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFeatureFlag"
  ): TypedContractMethod<
    [featureId: string, status: BigNumberish, rolloutPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizedWriterUpdated"
  ): TypedContractEvent<
    AuthorizedWriterUpdatedEvent.InputTuple,
    AuthorizedWriterUpdatedEvent.OutputTuple,
    AuthorizedWriterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeatureFlagCreated"
  ): TypedContractEvent<
    FeatureFlagCreatedEvent.InputTuple,
    FeatureFlagCreatedEvent.OutputTuple,
    FeatureFlagCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FeatureFlagDeleted"
  ): TypedContractEvent<
    FeatureFlagDeletedEvent.InputTuple,
    FeatureFlagDeletedEvent.OutputTuple,
    FeatureFlagDeletedEvent.OutputObject
  >;
  getEvent(
    key: "FeatureFlagUpdated"
  ): TypedContractEvent<
    FeatureFlagUpdatedEvent.InputTuple,
    FeatureFlagUpdatedEvent.OutputTuple,
    FeatureFlagUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeatureUsageTracked"
  ): TypedContractEvent<
    FeatureUsageTrackedEvent.InputTuple,
    FeatureUsageTrackedEvent.OutputTuple,
    FeatureUsageTrackedEvent.OutputObject
  >;

  filters: {
    "AuthorizedWriterUpdated(address,bool)": TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;
    AuthorizedWriterUpdated: TypedContractEvent<
      AuthorizedWriterUpdatedEvent.InputTuple,
      AuthorizedWriterUpdatedEvent.OutputTuple,
      AuthorizedWriterUpdatedEvent.OutputObject
    >;

    "FeatureFlagCreated(string,string,uint8)": TypedContractEvent<
      FeatureFlagCreatedEvent.InputTuple,
      FeatureFlagCreatedEvent.OutputTuple,
      FeatureFlagCreatedEvent.OutputObject
    >;
    FeatureFlagCreated: TypedContractEvent<
      FeatureFlagCreatedEvent.InputTuple,
      FeatureFlagCreatedEvent.OutputTuple,
      FeatureFlagCreatedEvent.OutputObject
    >;

    "FeatureFlagDeleted(string)": TypedContractEvent<
      FeatureFlagDeletedEvent.InputTuple,
      FeatureFlagDeletedEvent.OutputTuple,
      FeatureFlagDeletedEvent.OutputObject
    >;
    FeatureFlagDeleted: TypedContractEvent<
      FeatureFlagDeletedEvent.InputTuple,
      FeatureFlagDeletedEvent.OutputTuple,
      FeatureFlagDeletedEvent.OutputObject
    >;

    "FeatureFlagUpdated(string,uint8,uint256)": TypedContractEvent<
      FeatureFlagUpdatedEvent.InputTuple,
      FeatureFlagUpdatedEvent.OutputTuple,
      FeatureFlagUpdatedEvent.OutputObject
    >;
    FeatureFlagUpdated: TypedContractEvent<
      FeatureFlagUpdatedEvent.InputTuple,
      FeatureFlagUpdatedEvent.OutputTuple,
      FeatureFlagUpdatedEvent.OutputObject
    >;

    "FeatureUsageTracked(string,address,uint256)": TypedContractEvent<
      FeatureUsageTrackedEvent.InputTuple,
      FeatureUsageTrackedEvent.OutputTuple,
      FeatureUsageTrackedEvent.OutputObject
    >;
    FeatureUsageTracked: TypedContractEvent<
      FeatureUsageTrackedEvent.InputTuple,
      FeatureUsageTrackedEvent.OutputTuple,
      FeatureUsageTrackedEvent.OutputObject
    >;
  };
}
