/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GovernanceManager {
  export type GovernanceConfigStruct = {
    votingDelay: BigNumberish;
    votingPeriod: BigNumberish;
    proposalThreshold: BigNumberish;
    quorumVotes: BigNumberish;
    executionDelay: BigNumberish;
  };

  export type GovernanceConfigStructOutput = [
    votingDelay: bigint,
    votingPeriod: bigint,
    proposalThreshold: bigint,
    quorumVotes: bigint,
    executionDelay: bigint
  ] & {
    votingDelay: bigint;
    votingPeriod: bigint;
    proposalThreshold: bigint;
    quorumVotes: bigint;
    executionDelay: bigint;
  };
}

export interface GovernanceManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addGovernor"
      | "canExecuteProposal"
      | "cancelProposal"
      | "castVote"
      | "config"
      | "executeProposal"
      | "getGovernanceConfig"
      | "getProposal"
      | "getProposalCount"
      | "getVotingPower"
      | "isAddressGovernor"
      | "isGovernor"
      | "owner"
      | "proposalCount"
      | "proposals"
      | "propose"
      | "removeGovernor"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateGovernanceConfig"
      | "updateGovernorPower"
      | "votingPower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovernanceConfigUpdated"
      | "GovernorAdded"
      | "GovernorRemoved"
      | "OwnershipTransferred"
      | "ProposalCanceled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addGovernor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernanceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, string, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGovernorPower",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernanceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernorPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
}

export namespace GovernanceConfigUpdatedEvent {
  export type InputTuple = [
    field: string,
    oldValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [field: string, oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    field: string;
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernorAddedEvent {
  export type InputTuple = [governor: AddressLike, votingPower: BigNumberish];
  export type OutputTuple = [governor: string, votingPower: bigint];
  export interface OutputObject {
    governor: string;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernorRemovedEvent {
  export type InputTuple = [governor: AddressLike];
  export type OutputTuple = [governor: string];
  export interface OutputObject {
    governor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [proposalId: BigNumberish, canceler: AddressLike];
  export type OutputTuple = [proposalId: bigint, canceler: string];
  export interface OutputObject {
    proposalId: bigint;
    canceler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    title: string,
    target: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    title: string,
    target: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    title: string;
    target: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, executor: AddressLike];
  export type OutputTuple = [proposalId: bigint, executor: string];
  export interface OutputObject {
    proposalId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    votes: BigNumberish,
    support: boolean
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    votes: bigint,
    support: boolean
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    votes: bigint;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GovernanceManager extends BaseContract {
  connect(runner?: ContractRunner | null): GovernanceManager;
  waitForDeployment(): Promise<this>;

  interface: GovernanceManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addGovernor: TypedContractMethod<
    [governor: AddressLike, power: BigNumberish],
    [void],
    "nonpayable"
  >;

  canExecuteProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  cancelProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  config: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        votingDelay: bigint;
        votingPeriod: bigint;
        proposalThreshold: bigint;
        quorumVotes: bigint;
        executionDelay: bigint;
      }
    ],
    "view"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getGovernanceConfig: TypedContractMethod<
    [],
    [GovernanceManager.GovernanceConfigStructOutput],
    "view"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        target: string;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;

  getProposalCount: TypedContractMethod<[], [bigint], "view">;

  getVotingPower: TypedContractMethod<
    [governor: AddressLike],
    [bigint],
    "view"
  >;

  isAddressGovernor: TypedContractMethod<
    [governor: AddressLike],
    [boolean],
    "view"
  >;

  isGovernor: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        target: string;
        data: string;
        value: bigint;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      title: string,
      description: string,
      target: AddressLike,
      data: BytesLike,
      value: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  removeGovernor: TypedContractMethod<
    [governor: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateGovernanceConfig: TypedContractMethod<
    [
      _votingDelay: BigNumberish,
      _votingPeriod: BigNumberish,
      _proposalThreshold: BigNumberish,
      _quorumVotes: BigNumberish,
      _executionDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateGovernorPower: TypedContractMethod<
    [governor: AddressLike, power: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingPower: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addGovernor"
  ): TypedContractMethod<
    [governor: AddressLike, power: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canExecuteProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        votingDelay: bigint;
        votingPeriod: bigint;
        proposalThreshold: bigint;
        quorumVotes: bigint;
        executionDelay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGovernanceConfig"
  ): TypedContractMethod<
    [],
    [GovernanceManager.GovernanceConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        target: string;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotingPower"
  ): TypedContractMethod<[governor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAddressGovernor"
  ): TypedContractMethod<[governor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isGovernor"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        target: string;
        data: string;
        value: bigint;
        startTime: bigint;
        endTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      target: AddressLike,
      data: BytesLike,
      value: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeGovernor"
  ): TypedContractMethod<[governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGovernanceConfig"
  ): TypedContractMethod<
    [
      _votingDelay: BigNumberish,
      _votingPeriod: BigNumberish,
      _proposalThreshold: BigNumberish,
      _quorumVotes: BigNumberish,
      _executionDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateGovernorPower"
  ): TypedContractMethod<
    [governor: AddressLike, power: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingPower"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "GovernanceConfigUpdated"
  ): TypedContractEvent<
    GovernanceConfigUpdatedEvent.InputTuple,
    GovernanceConfigUpdatedEvent.OutputTuple,
    GovernanceConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernorAdded"
  ): TypedContractEvent<
    GovernorAddedEvent.InputTuple,
    GovernorAddedEvent.OutputTuple,
    GovernorAddedEvent.OutputObject
  >;
  getEvent(
    key: "GovernorRemoved"
  ): TypedContractEvent<
    GovernorRemovedEvent.InputTuple,
    GovernorRemovedEvent.OutputTuple,
    GovernorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "GovernanceConfigUpdated(string,uint256,uint256)": TypedContractEvent<
      GovernanceConfigUpdatedEvent.InputTuple,
      GovernanceConfigUpdatedEvent.OutputTuple,
      GovernanceConfigUpdatedEvent.OutputObject
    >;
    GovernanceConfigUpdated: TypedContractEvent<
      GovernanceConfigUpdatedEvent.InputTuple,
      GovernanceConfigUpdatedEvent.OutputTuple,
      GovernanceConfigUpdatedEvent.OutputObject
    >;

    "GovernorAdded(address,uint256)": TypedContractEvent<
      GovernorAddedEvent.InputTuple,
      GovernorAddedEvent.OutputTuple,
      GovernorAddedEvent.OutputObject
    >;
    GovernorAdded: TypedContractEvent<
      GovernorAddedEvent.InputTuple,
      GovernorAddedEvent.OutputTuple,
      GovernorAddedEvent.OutputObject
    >;

    "GovernorRemoved(address)": TypedContractEvent<
      GovernorRemovedEvent.InputTuple,
      GovernorRemovedEvent.OutputTuple,
      GovernorRemovedEvent.OutputObject
    >;
    GovernorRemoved: TypedContractEvent<
      GovernorRemovedEvent.InputTuple,
      GovernorRemovedEvent.OutputTuple,
      GovernorRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCanceled(uint256,address)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string,address,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,address)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
